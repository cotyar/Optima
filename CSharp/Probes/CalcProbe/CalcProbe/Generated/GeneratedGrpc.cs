// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: generated.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace LinNet {
  public static partial class Calc
  {
    static readonly string __ServiceName = "lin.generated.test1.Calc";

    static readonly grpc::Marshaller<global::LinNet.TestDataset> __Marshaller_lin_generated_test1_TestDataset = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LinNet.TestDataset.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LinNet.TestDatasetResp> __Marshaller_lin_generated_test1_TestDatasetResp = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LinNet.TestDatasetResp.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LinNet.TestDatasetWithLineage> __Marshaller_lin_generated_test1_TestDatasetWithLineage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LinNet.TestDatasetWithLineage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LinNet.TestDatasetRespWithLineage> __Marshaller_lin_generated_test1_TestDatasetRespWithLineage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LinNet.TestDatasetRespWithLineage.Parser.ParseFrom);

    static readonly grpc::Method<global::LinNet.TestDataset, global::LinNet.TestDatasetResp> __Method_Run = new grpc::Method<global::LinNet.TestDataset, global::LinNet.TestDatasetResp>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "Run",
        __Marshaller_lin_generated_test1_TestDataset,
        __Marshaller_lin_generated_test1_TestDatasetResp);

    static readonly grpc::Method<global::LinNet.TestDatasetWithLineage, global::LinNet.TestDatasetRespWithLineage> __Method_RunWithLineage = new grpc::Method<global::LinNet.TestDatasetWithLineage, global::LinNet.TestDatasetRespWithLineage>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "RunWithLineage",
        __Marshaller_lin_generated_test1_TestDatasetWithLineage,
        __Marshaller_lin_generated_test1_TestDatasetRespWithLineage);

    static readonly grpc::Method<global::LinNet.TestDataset, global::LinNet.TestDataset> __Method_Echo = new grpc::Method<global::LinNet.TestDataset, global::LinNet.TestDataset>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Echo",
        __Marshaller_lin_generated_test1_TestDataset,
        __Marshaller_lin_generated_test1_TestDataset);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::LinNet.GeneratedReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Calc</summary>
    [grpc::BindServiceMethod(typeof(Calc), "BindService")]
    public abstract partial class CalcBase
    {
      /// <summary>
      /// End User needs to implement this one only, all others are autogenerated 
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task Run(grpc::IAsyncStreamReader<global::LinNet.TestDataset> requestStream, grpc::IServerStreamWriter<global::LinNet.TestDatasetResp> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task RunWithLineage(grpc::IAsyncStreamReader<global::LinNet.TestDatasetWithLineage> requestStream, grpc::IServerStreamWriter<global::LinNet.TestDatasetRespWithLineage> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Useful for "is alive" validations
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::LinNet.TestDataset> Echo(global::LinNet.TestDataset request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Calc</summary>
    public partial class CalcClient : grpc::ClientBase<CalcClient>
    {
      /// <summary>Creates a new client for Calc</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public CalcClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Calc that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public CalcClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected CalcClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected CalcClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// End User needs to implement this one only, all others are autogenerated 
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::LinNet.TestDataset, global::LinNet.TestDatasetResp> Run(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Run(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// End User needs to implement this one only, all others are autogenerated 
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::LinNet.TestDataset, global::LinNet.TestDatasetResp> Run(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_Run, null, options);
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::LinNet.TestDatasetWithLineage, global::LinNet.TestDatasetRespWithLineage> RunWithLineage(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RunWithLineage(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::LinNet.TestDatasetWithLineage, global::LinNet.TestDatasetRespWithLineage> RunWithLineage(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_RunWithLineage, null, options);
      }
      /// <summary>
      /// Useful for "is alive" validations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::LinNet.TestDataset Echo(global::LinNet.TestDataset request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Echo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Useful for "is alive" validations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::LinNet.TestDataset Echo(global::LinNet.TestDataset request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Echo, null, options, request);
      }
      /// <summary>
      /// Useful for "is alive" validations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::LinNet.TestDataset> EchoAsync(global::LinNet.TestDataset request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EchoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Useful for "is alive" validations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::LinNet.TestDataset> EchoAsync(global::LinNet.TestDataset request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Echo, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override CalcClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CalcClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(CalcBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Run, serviceImpl.Run)
          .AddMethod(__Method_RunWithLineage, serviceImpl.RunWithLineage)
          .AddMethod(__Method_Echo, serviceImpl.Echo).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, CalcBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Run, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::LinNet.TestDataset, global::LinNet.TestDatasetResp>(serviceImpl.Run));
      serviceBinder.AddMethod(__Method_RunWithLineage, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::LinNet.TestDatasetWithLineage, global::LinNet.TestDatasetRespWithLineage>(serviceImpl.RunWithLineage));
      serviceBinder.AddMethod(__Method_Echo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::LinNet.TestDataset, global::LinNet.TestDataset>(serviceImpl.Echo));
    }

  }
}
#endregion
