// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: lin.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace LinNet {
  public static partial class DatasetAuthorizationService
  {
    static readonly string __ServiceName = "lin.DatasetAuthorizationService";

    static readonly grpc::Marshaller<global::LinNet.DatasetAuthorizationRequest> __Marshaller_lin_DatasetAuthorizationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LinNet.DatasetAuthorizationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LinNet.DatasetAuthorizationResponse> __Marshaller_lin_DatasetAuthorizationResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LinNet.DatasetAuthorizationResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::LinNet.DatasetAuthorizationRequest, global::LinNet.DatasetAuthorizationResponse> __Method_CheckAllowed = new grpc::Method<global::LinNet.DatasetAuthorizationRequest, global::LinNet.DatasetAuthorizationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CheckAllowed",
        __Marshaller_lin_DatasetAuthorizationRequest,
        __Marshaller_lin_DatasetAuthorizationResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::LinNet.LinReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of DatasetAuthorizationService</summary>
    [grpc::BindServiceMethod(typeof(DatasetAuthorizationService), "BindService")]
    public abstract partial class DatasetAuthorizationServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::LinNet.DatasetAuthorizationResponse> CheckAllowed(global::LinNet.DatasetAuthorizationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for DatasetAuthorizationService</summary>
    public partial class DatasetAuthorizationServiceClient : grpc::ClientBase<DatasetAuthorizationServiceClient>
    {
      /// <summary>Creates a new client for DatasetAuthorizationService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public DatasetAuthorizationServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for DatasetAuthorizationService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public DatasetAuthorizationServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected DatasetAuthorizationServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected DatasetAuthorizationServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::LinNet.DatasetAuthorizationResponse CheckAllowed(global::LinNet.DatasetAuthorizationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CheckAllowed(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::LinNet.DatasetAuthorizationResponse CheckAllowed(global::LinNet.DatasetAuthorizationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CheckAllowed, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::LinNet.DatasetAuthorizationResponse> CheckAllowedAsync(global::LinNet.DatasetAuthorizationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CheckAllowedAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::LinNet.DatasetAuthorizationResponse> CheckAllowedAsync(global::LinNet.DatasetAuthorizationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CheckAllowed, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override DatasetAuthorizationServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DatasetAuthorizationServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(DatasetAuthorizationServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CheckAllowed, serviceImpl.CheckAllowed).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, DatasetAuthorizationServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CheckAllowed, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::LinNet.DatasetAuthorizationRequest, global::LinNet.DatasetAuthorizationResponse>(serviceImpl.CheckAllowed));
    }

  }
}
#endregion
