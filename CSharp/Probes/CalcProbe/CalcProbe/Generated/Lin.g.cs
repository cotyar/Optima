// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: lin.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace LinNet {

  /// <summary>Holder for reflection information generated from lin.proto</summary>
  public static partial class LinReflection {

    #region Descriptor
    /// <summary>File descriptor for lin.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LinReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CglsaW4ucHJvdG8SA2xpbhobZ29vZ2xlL3Byb3RvYnVmL2VtcHR5LnByb3Rv",
            "Gh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvIqEKCg5EYXRhc2V0",
            "TGluZWFnZRIhCgdkYXRhc2V0GAEgASgLMhAubGluLkRhdGFzZXRJbmZvEh0K",
            "BmZpZWxkcxgCIAMoCzINLmxpbi5GaWVsZERlZhIvCgRjb3B5GAogASgLMh8u",
            "bGluLkRhdGFzZXRMaW5lYWdlLkRhdGFzZXRDb3B5SAASOAoMbG9hZGVkRmll",
            "bGRzGAsgASgLMiAubGluLkRhdGFzZXRMaW5lYWdlLkxvYWRlZEZpZWxkc0gA",
            "EjoKCnByb2plY3Rpb24YDCABKAsyJC5saW4uRGF0YXNldExpbmVhZ2UuRmll",
            "bGRQcm9qZWN0aW9uc0gAEi8KBmZpbHRlchgNIAEoCzIdLmxpbi5EYXRhc2V0",
            "TGluZWFnZS5Sb3dGaWx0ZXJIABI2CgthZ2dyZWdhdGlvbhgOIAEoCzIfLmxp",
            "bi5EYXRhc2V0TGluZWFnZS5BZ2dyZWdhdGlvbkgAEjYKDXBvc3RBZ2dGaWx0",
            "ZXIYDyABKAsyHS5saW4uRGF0YXNldExpbmVhZ2UuUm93RmlsdGVySAASMQoF",
            "dW5pb24YECABKAsyIC5saW4uRGF0YXNldExpbmVhZ2UuRGF0YXNldFVuaW9u",
            "SAASLwoEam9pbhgRIAEoCzIfLmxpbi5EYXRhc2V0TGluZWFnZS5EYXRhc2V0",
            "Sm9pbkgAGlgKC0xvYWRlZEZpZWxkEhwKBWZpZWxkGAEgASgLMg0ubGluLkZp",
            "ZWxkRGVmEisKC2ZpZWxkU291cmNlGAIgASgOMhYubGluLkxvYWRlZEZpZWxk",
            "U291cmNlGj8KDExvYWRlZEZpZWxkcxIvCgZmaWVsZHMYASADKAsyHy5saW4u",
            "RGF0YXNldExpbmVhZ2UuTG9hZGVkRmllbGQaMwoLRGF0YXNldENvcHkSJAoH",
            "ZGF0YXNldBgBIAEoCzITLmxpbi5EYXRhc2V0TGluZWFnZRpdCg9GaWVsZFBy",
            "b2plY3Rpb24SGwoEZnJvbRgBIAEoCzINLmxpbi5GaWVsZERlZhIZCgJ0bxgC",
            "IAEoCzINLmxpbi5GaWVsZERlZhISCgpleHByZXNzaW9uGAUgASgJGnIKEEZp",
            "ZWxkUHJvamVjdGlvbnMSJAoHZGF0YXNldBgBIAEoCzITLmxpbi5EYXRhc2V0",
            "TGluZWFnZRI4Cgtwcm9qZWN0aW9ucxgCIAMoCzIjLmxpbi5EYXRhc2V0TGlu",
            "ZWFnZS5GaWVsZFByb2plY3Rpb24aXQoJUm93RmlsdGVyEiQKB2RhdGFzZXQY",
            "ASABKAsyEy5saW4uRGF0YXNldExpbmVhZ2USKgoJY29uZGl0aW9uGAIgAygL",
            "MhcubGluLlJvd0ZpbHRlckNvbmRpdGlvbhpfCgtBZ2dyZWdhdGlvbhIsCglk",
            "aW1lbnNpb24YASABKAsyGS5saW4uQWdncmVnYXRpb25EaW1lbnNpb24SIgoE",
            "dHlwZRgCIAEoDjIULmxpbi5BZ2dyZWdhdGlvblR5cGUaNQoMRGF0YXNldFVu",
            "aW9uEiUKCGRhdGFzZXRzGAEgAygLMhMubGluLkRhdGFzZXRMaW5lYWdlGnsK",
            "C0RhdGFzZXRKb2luEh8KB2RhdGFzZXQYASABKAsyDi5saW4uRGF0YXNldElk",
            "Eh8KCGpvaW5UeXBlGAIgASgOMg0ubGluLkpvaW5UeXBlEioKCWNvbmRpdGlv",
            "bhgDIAMoCzIXLmxpbi5Sb3dGaWx0ZXJDb25kaXRpb25CCgoIYWN0aXZpdHki",
            "GAoJRGF0YXNldElkEgsKA3VpZBgBIAEoCSKNBAoMRGF0YXNldFN0YXRlEi4K",
            "CGNyZWF0aW5nGAEgASgLMhoubGluLkRhdGFzZXRTdGF0ZS5DcmVhdGluZ0gA",
            "EikKB3ByaXZhdGUYAiABKAsyFi5nb29nbGUucHJvdG9idWYuRW1wdHlIABI6",
            "Cghjb250cm9scxgDIAEoCzImLmxpbi5EYXRhc2V0U3RhdGUuSW5Db250cm9s",
            "c1ZhbGlkYXRpb25IABIuCghjdXJhdGluZxgEIAEoCzIaLmxpbi5EYXRhc2V0",
            "U3RhdGUuQ3VyYXRpbmdIABIuCghnb3Zlcm5lZBgFIAEoCzIaLmxpbi5EYXRh",
            "c2V0U3RhdGUuR292ZXJuZWRIABo7CghDcmVhdGluZxIvCgtzdWJtaXR0ZWRB",
            "dBgBIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAaOwoIQ3VyYXRp",
            "bmcSLwoLc3VibWl0dGVkQXQYASABKAsyGi5nb29nbGUucHJvdG9idWYuVGlt",
            "ZXN0YW1wGkcKFEluQ29udHJvbHNWYWxpZGF0aW9uEi8KC3N1Ym1pdHRlZEF0",
            "GAEgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBo6CghHb3Zlcm5l",
            "ZBIuCgphcHByb3ZlZEF0GAEgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVz",
            "dGFtcEIHCgVzdGF0ZSL3BgoLRGF0YXNldEluZm8SIQoJZGF0YXNldElkGAEg",
            "ASgLMg4ubGluLkRhdGFzZXRJZBIMCgRuYW1lGAIgASgJEhgKBW93bmVyGAMg",
            "ASgLMgkubGluLlVzZXISHAoJY3JlYXRlZEJ5GAQgASgLMgkubGluLlVzZXIS",
            "LQoJY3JlYXRlZEF0GAUgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFt",
            "cBIMCgRzaXplGAYgASgNEhMKC2Rlc2NyaXB0aW9uGAcgASgJEicKBnJhdGlu",
            "ZxgIIAEoCzIXLmxpbi5EYXRhc2V0SW5mby5SYXRpbmcSKgoIY29tbWVudHMY",
            "CSADKAsyGC5saW4uRGF0YXNldEluZm8uQ29tbWVudBIiCgR0YWdzGAogAygL",
            "MhQubGluLkRhdGFzZXRJbmZvLlRhZxI1CgtwZXJzaXN0ZWRUbxgUIAEoDjIg",
            "Lmxpbi5EYXRhc2V0SW5mby5QZXJzaXN0ZW5jZVR5cGUSJwoMZGF0YXNldFN0",
            "YXRlGGQgASgLMhEubGluLkRhdGFzZXRTdGF0ZRp6CgZSYXRpbmcSLAoFc3Rh",
            "cnMYASABKA4yHS5saW4uRGF0YXNldEluZm8uUmF0aW5nLlN0YXJzIkIKBVN0",
            "YXJzEggKBFpFUk8QABIHCgNPTkUQARIHCgNUV08QAhIJCgVUSFJFRRADEggK",
            "BEZPVVIQBBIICgRGSVZFEAUaiwEKB0NvbW1lbnQSFwoEdXNlchgBIAEoCzIJ",
            "Lmxpbi5Vc2VyEg8KB2NvbW1lbnQYAiABKAkSJwoGcmF0aW5nGAMgASgLMhcu",
            "bGluLkRhdGFzZXRJbmZvLlJhdGluZxItCgljcmVhdGVkQXQYBSABKAsyGi5n",
            "b29nbGUucHJvdG9idWYuVGltZXN0YW1wGpABCgNUYWcSCwoDdGFnGAEgASgJ",
            "Ei8KCGNhdGVnb3J5GAIgASgOMh0ubGluLkRhdGFzZXRJbmZvLlRhZy5DYXRl",
            "Z29yeSJLCghDYXRlZ29yeRILCgdERUZBVUxUEAASEAoMREFUQVNFVF9OQU1F",
            "EAESCwoHT05fUFJFTRACEgkKBUNMT1VEEAMSCAoEUFJPRBAEIjcKD1BlcnNp",
            "c3RlbmNlVHlwZRIKCgZNZW1vcnkQABILCgdSb2Nrc0RiEAESCwoHUGFycXVl",
            "dBACIoYBCghGaWVsZERlZhIMCgRuYW1lGAEgASgJEiEKCWRhdGFzZXRJZBgC",
            "IAEoCzIOLmxpbi5EYXRhc2V0SWQSHAoEdHlwZRgDIAEoDjIOLmxpbi5GaWVs",
            "ZFR5cGUSFQoNb3B0aW9uYWxGaWVsZBgEIAEoCBIUCgxkZWZhdWx0VmFsdWUY",
            "BSABKAkiJwoSUm93RmlsdGVyQ29uZGl0aW9uEhEKCWNvbmRpdGlvbhgBIAEo",
            "CSImChRBZ2dyZWdhdGlvbkRpbWVuc2lvbhIOCgZmaWVsZHMYASADKAkiIwoN",
            "RGF0YXNldFNjaGVtYRISCgpkZXNjcmlwdG9yGAEgASgJIvcBCgpSb3dMaW5l",
            "YWdlEi0KB2xpbmVhZ2UYASADKAsyHC5saW4uUm93TGluZWFnZS5MaW5lYWdl",
            "RW50cnkaaQoPUm93RmllbGRMaW5lYWdlEh4KB3BhcmVudHMYASADKAsyDS5s",
            "aW4uRmllbGREZWYSJwoMY2FsY3VsYXRvcklkGAIgASgLMhEubGluLkNhbGN1",
            "bGF0b3JJZBINCgVyb3dJZBgDIAEoAxpPCgxMaW5lYWdlRW50cnkSCwoDa2V5",
            "GAEgASgJEi4KBXZhbHVlGAIgASgLMh8ubGluLlJvd0xpbmVhZ2UuUm93Rmll",
            "bGRMaW5lYWdlOgI4ASIhCgRVc2VyEgsKA3VpZBgBIAEoCRIMCgRuYW1lGAIg",
            "ASgJIiEKBFJvbGUSCwoDdWlkGAEgASgJEgwKBG5hbWUYAiABKAkiSQoJUHJp",
            "bmNpcGFsEhkKBHVzZXIYASABKAsyCS5saW4uVXNlckgAEhkKBHJvbGUYAiAB",
            "KAsyCS5saW4uUm9sZUgAQgYKBGtpbmQiqwEKC1Blcm1pc3Npb25zEjsKDHBl",
            "clByaW5jaXBhbBgBIAMoCzIlLmxpbi5QZXJtaXNzaW9ucy5QcmluY2lwYWxQ",
            "ZXJtaXNzaW9ucxpfChRQcmluY2lwYWxQZXJtaXNzaW9ucxIhCglwcmluY2lw",
            "YWwYASABKAsyDi5saW4uUHJpbmNpcGFsEiQKB2FsbG93ZWQYAiADKA4yEy5s",
            "aW4uUGVybWlzc2lvblR5cGUiWAoMRGF0YXNldEdyb3VwEiAKCGRhdGFzZXRz",
            "GAEgAygLMg4ubGluLkRhdGFzZXRJZBImCgtwZXJtaXNzaW9ucxjIASABKAsy",
            "EC5saW4uUGVybWlzc2lvbnMiGwoMQ2FsY3VsYXRvcklkEgsKA3VpZBgBIAEo",
            "CSKjAQoUQ2FsY3VsYXRvckRlZmluaXRpb24SHgoDdWlkGAEgASgLMhEubGlu",
            "LkNhbGN1bGF0b3JJZBIVCg1ycGNEZXNjcmlwdG9yGAIgASgJEikKDWlucHV0",
            "RGF0YXNldHMYAyADKAsyEi5saW4uRGF0YXNldFNjaGVtYRIpCg1vdXB1dERh",
            "dGFzZXRzGAQgAygLMhIubGluLkRhdGFzZXRTY2hlbWEi0QEKB1NhbmRib3gS",
            "GAoFb3duZXIYASABKAsyCS5saW4uVXNlchIhCgZnbG9iYWwYAiABKAsyES5s",
            "aW4uRGF0YXNldEdyb3VwEiIKB3N0YXNoZWQYAyABKAsyES5saW4uRGF0YXNl",
            "dEdyb3VwEiwKEXBlbmRpbmdWYWxpZGF0aW9uGAQgASgLMhEubGluLkRhdGFz",
            "ZXRHcm91cBI3ChRhdmFpbGFibGVDYWxjdWxhdG9ycxgFIAMoCzIZLmxpbi5D",
            "YWxjdWxhdG9yRGVmaW5pdGlvbiKAAQobRGF0YXNldEF1dGhvcml6YXRpb25S",
            "ZXF1ZXN0EhcKBG5hbWUYASABKAsyCS5saW4uVXNlchInCgpwZXJtaXNzaW9u",
            "GAIgASgOMhMubGluLlBlcm1pc3Npb25UeXBlEh8KB2RhdGFzZXQYAyABKAsy",
            "Di5saW4uRGF0YXNldElkIo8BChxEYXRhc2V0QXV0aG9yaXphdGlvblJlc3Bv",
            "bnNlEjgKBnJlc3VsdBgBIAEoDjIoLmxpbi5EYXRhc2V0QXV0aG9yaXphdGlv",
            "blJlc3BvbnNlLlJlc3VsdCI1CgZSZXN1bHQSCgoGREVOSUVEEAASCwoHQUxM",
            "T1dFRBABEhIKDlVTRVJfTk9UX0ZPVU5EEAIqawoRTG9hZGVkRmllbGRTb3Vy",
            "Y2USCQoFQ29uc3QQABIHCgNDc3YQARILCgdQYXJxdWV0EAISCAoEWmV1cxAD",
            "EgsKB0FsdGVyaXgQBBINCglLeWxlZ2VuY2UQBRIPCgtEYXRhRmFjdG9yeRAG",
            "KnYKCUZpZWxkVHlwZRIKCgZTdHJpbmcQABIICgRJbnQ4EAESCQoFSW50MTYQ",
            "AhIJCgVJbnQzMhADEgkKBUludDY0EAQSCwoHRmxvYXQzMhAFEgsKB0Zsb2F0",
            "NjQQBhILCgdEZWNpbWFsEAcSCwoHQm9vbGVhbhAIKkQKD0FnZ3JlZ2F0aW9u",
            "VHlwZRIHCgNTVU0QABILCgdBVkVSQUdFEAESCQoFQ09VTlQQAhIHCgNNSU4Q",
            "AxIHCgNNQVgQBCpACghKb2luVHlwZRIJCgVJTk5FUhAAEggKBExFRlQQARIJ",
            "CgVSSUdIVBACEgkKBU9VVEVSEAMSCQoFQ1JPU1MQBCo0Cg5QZXJtaXNzaW9u",
            "VHlwZRIICgROT05FEAASCAoEUkVBRBABEg4KCkNSRUFURV9ORVcQAjJyChtE",
            "YXRhc2V0QXV0aG9yaXphdGlvblNlcnZpY2USUwoMQ2hlY2tBbGxvd2VkEiAu",
            "bGluLkRhdGFzZXRBdXRob3JpemF0aW9uUmVxdWVzdBohLmxpbi5EYXRhc2V0",
            "QXV0aG9yaXphdGlvblJlc3BvbnNlQgmqAgZMaW5OZXRQAFABYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::LinNet.LoadedFieldSource), typeof(global::LinNet.FieldType), typeof(global::LinNet.AggregationType), typeof(global::LinNet.JoinType), typeof(global::LinNet.PermissionType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::LinNet.DatasetLineage), global::LinNet.DatasetLineage.Parser, new[]{ "Dataset", "Fields", "Copy", "LoadedFields", "Projection", "Filter", "Aggregation", "PostAggFilter", "Union", "Join" }, new[]{ "Activity" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::LinNet.DatasetLineage.Types.LoadedField), global::LinNet.DatasetLineage.Types.LoadedField.Parser, new[]{ "Field", "FieldSource" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LinNet.DatasetLineage.Types.LoadedFields), global::LinNet.DatasetLineage.Types.LoadedFields.Parser, new[]{ "Fields" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LinNet.DatasetLineage.Types.DatasetCopy), global::LinNet.DatasetLineage.Types.DatasetCopy.Parser, new[]{ "Dataset" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LinNet.DatasetLineage.Types.FieldProjection), global::LinNet.DatasetLineage.Types.FieldProjection.Parser, new[]{ "From", "To", "Expression" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LinNet.DatasetLineage.Types.FieldProjections), global::LinNet.DatasetLineage.Types.FieldProjections.Parser, new[]{ "Dataset", "Projections" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LinNet.DatasetLineage.Types.RowFilter), global::LinNet.DatasetLineage.Types.RowFilter.Parser, new[]{ "Dataset", "Condition" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LinNet.DatasetLineage.Types.Aggregation), global::LinNet.DatasetLineage.Types.Aggregation.Parser, new[]{ "Dimension", "Type" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LinNet.DatasetLineage.Types.DatasetUnion), global::LinNet.DatasetLineage.Types.DatasetUnion.Parser, new[]{ "Datasets" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LinNet.DatasetLineage.Types.DatasetJoin), global::LinNet.DatasetLineage.Types.DatasetJoin.Parser, new[]{ "Dataset", "JoinType", "Condition" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::LinNet.DatasetId), global::LinNet.DatasetId.Parser, new[]{ "Uid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LinNet.DatasetState), global::LinNet.DatasetState.Parser, new[]{ "Creating", "Private", "Controls", "Curating", "Governed" }, new[]{ "State" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::LinNet.DatasetState.Types.Creating), global::LinNet.DatasetState.Types.Creating.Parser, new[]{ "SubmittedAt" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LinNet.DatasetState.Types.Curating), global::LinNet.DatasetState.Types.Curating.Parser, new[]{ "SubmittedAt" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LinNet.DatasetState.Types.InControlsValidation), global::LinNet.DatasetState.Types.InControlsValidation.Parser, new[]{ "SubmittedAt" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LinNet.DatasetState.Types.Governed), global::LinNet.DatasetState.Types.Governed.Parser, new[]{ "ApprovedAt" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::LinNet.DatasetInfo), global::LinNet.DatasetInfo.Parser, new[]{ "DatasetId", "Name", "Owner", "CreatedBy", "CreatedAt", "Size", "Description", "Rating", "Comments", "Tags", "PersistedTo", "DatasetState" }, null, new[]{ typeof(global::LinNet.DatasetInfo.Types.PersistenceType) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::LinNet.DatasetInfo.Types.Rating), global::LinNet.DatasetInfo.Types.Rating.Parser, new[]{ "Stars" }, null, new[]{ typeof(global::LinNet.DatasetInfo.Types.Rating.Types.Stars) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LinNet.DatasetInfo.Types.Comment), global::LinNet.DatasetInfo.Types.Comment.Parser, new[]{ "User", "Comment_", "Rating", "CreatedAt" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LinNet.DatasetInfo.Types.Tag), global::LinNet.DatasetInfo.Types.Tag.Parser, new[]{ "Tag_", "Category" }, null, new[]{ typeof(global::LinNet.DatasetInfo.Types.Tag.Types.Category) }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::LinNet.FieldDef), global::LinNet.FieldDef.Parser, new[]{ "Name", "DatasetId", "Type", "OptionalField", "DefaultValue" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LinNet.RowFilterCondition), global::LinNet.RowFilterCondition.Parser, new[]{ "Condition" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LinNet.AggregationDimension), global::LinNet.AggregationDimension.Parser, new[]{ "Fields" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LinNet.DatasetSchema), global::LinNet.DatasetSchema.Parser, new[]{ "Descriptor_" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LinNet.RowLineage), global::LinNet.RowLineage.Parser, new[]{ "Lineage" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::LinNet.RowLineage.Types.RowFieldLineage), global::LinNet.RowLineage.Types.RowFieldLineage.Parser, new[]{ "Parents", "CalculatorId", "RowId" }, null, null, null, null),
            null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::LinNet.User), global::LinNet.User.Parser, new[]{ "Uid", "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LinNet.Role), global::LinNet.Role.Parser, new[]{ "Uid", "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LinNet.Principal), global::LinNet.Principal.Parser, new[]{ "User", "Role" }, new[]{ "Kind" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LinNet.Permissions), global::LinNet.Permissions.Parser, new[]{ "PerPrincipal" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::LinNet.Permissions.Types.PrincipalPermissions), global::LinNet.Permissions.Types.PrincipalPermissions.Parser, new[]{ "Principal", "Allowed" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::LinNet.DatasetGroup), global::LinNet.DatasetGroup.Parser, new[]{ "Datasets", "Permissions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LinNet.CalculatorId), global::LinNet.CalculatorId.Parser, new[]{ "Uid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LinNet.CalculatorDefinition), global::LinNet.CalculatorDefinition.Parser, new[]{ "Uid", "RpcDescriptor", "InputDatasets", "OuputDatasets" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LinNet.Sandbox), global::LinNet.Sandbox.Parser, new[]{ "Owner", "Global", "Stashed", "PendingValidation", "AvailableCalculators" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LinNet.DatasetAuthorizationRequest), global::LinNet.DatasetAuthorizationRequest.Parser, new[]{ "Name", "Permission", "Dataset" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LinNet.DatasetAuthorizationResponse), global::LinNet.DatasetAuthorizationResponse.Parser, new[]{ "Result" }, null, new[]{ typeof(global::LinNet.DatasetAuthorizationResponse.Types.Result) }, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum LoadedFieldSource {
    [pbr::OriginalName("Const")] Const = 0,
    [pbr::OriginalName("Csv")] Csv = 1,
    [pbr::OriginalName("Parquet")] Parquet = 2,
    [pbr::OriginalName("Zeus")] Zeus = 3,
    [pbr::OriginalName("Alterix")] Alterix = 4,
    [pbr::OriginalName("Kylegence")] Kylegence = 5,
    [pbr::OriginalName("DataFactory")] DataFactory = 6,
  }

  public enum FieldType {
    [pbr::OriginalName("String")] String = 0,
    [pbr::OriginalName("Int8")] Int8 = 1,
    [pbr::OriginalName("Int16")] Int16 = 2,
    [pbr::OriginalName("Int32")] Int32 = 3,
    [pbr::OriginalName("Int64")] Int64 = 4,
    [pbr::OriginalName("Float32")] Float32 = 5,
    [pbr::OriginalName("Float64")] Float64 = 6,
    [pbr::OriginalName("Decimal")] Decimal = 7,
    [pbr::OriginalName("Boolean")] Boolean = 8,
  }

  public enum AggregationType {
    [pbr::OriginalName("SUM")] Sum = 0,
    [pbr::OriginalName("AVERAGE")] Average = 1,
    [pbr::OriginalName("COUNT")] Count = 2,
    [pbr::OriginalName("MIN")] Min = 3,
    [pbr::OriginalName("MAX")] Max = 4,
  }

  public enum JoinType {
    [pbr::OriginalName("INNER")] Inner = 0,
    [pbr::OriginalName("LEFT")] Left = 1,
    [pbr::OriginalName("RIGHT")] Right = 2,
    [pbr::OriginalName("OUTER")] Outer = 3,
    [pbr::OriginalName("CROSS")] Cross = 4,
  }

  public enum PermissionType {
    [pbr::OriginalName("NONE")] None = 0,
    [pbr::OriginalName("READ")] Read = 1,
    [pbr::OriginalName("CREATE_NEW")] CreateNew = 2,
  }

  #endregion

  #region Messages
  public sealed partial class DatasetLineage : pb::IMessage<DatasetLineage> {
    private static readonly pb::MessageParser<DatasetLineage> _parser = new pb::MessageParser<DatasetLineage>(() => new DatasetLineage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DatasetLineage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LinNet.LinReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatasetLineage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatasetLineage(DatasetLineage other) : this() {
      dataset_ = other.dataset_ != null ? other.dataset_.Clone() : null;
      fields_ = other.fields_.Clone();
      switch (other.ActivityCase) {
        case ActivityOneofCase.Copy:
          Copy = other.Copy.Clone();
          break;
        case ActivityOneofCase.LoadedFields:
          LoadedFields = other.LoadedFields.Clone();
          break;
        case ActivityOneofCase.Projection:
          Projection = other.Projection.Clone();
          break;
        case ActivityOneofCase.Filter:
          Filter = other.Filter.Clone();
          break;
        case ActivityOneofCase.Aggregation:
          Aggregation = other.Aggregation.Clone();
          break;
        case ActivityOneofCase.PostAggFilter:
          PostAggFilter = other.PostAggFilter.Clone();
          break;
        case ActivityOneofCase.Union:
          Union = other.Union.Clone();
          break;
        case ActivityOneofCase.Join:
          Join = other.Join.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatasetLineage Clone() {
      return new DatasetLineage(this);
    }

    /// <summary>Field number for the "dataset" field.</summary>
    public const int DatasetFieldNumber = 1;
    private global::LinNet.DatasetInfo dataset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LinNet.DatasetInfo Dataset {
      get { return dataset_; }
      set {
        dataset_ = value;
      }
    }

    /// <summary>Field number for the "fields" field.</summary>
    public const int FieldsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::LinNet.FieldDef> _repeated_fields_codec
        = pb::FieldCodec.ForMessage(18, global::LinNet.FieldDef.Parser);
    private readonly pbc::RepeatedField<global::LinNet.FieldDef> fields_ = new pbc::RepeatedField<global::LinNet.FieldDef>();
    /// <summary>
    ///repeated DatasetLineage previousActivities = 100;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LinNet.FieldDef> Fields {
      get { return fields_; }
    }

    /// <summary>Field number for the "copy" field.</summary>
    public const int CopyFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LinNet.DatasetLineage.Types.DatasetCopy Copy {
      get { return activityCase_ == ActivityOneofCase.Copy ? (global::LinNet.DatasetLineage.Types.DatasetCopy) activity_ : null; }
      set {
        activity_ = value;
        activityCase_ = value == null ? ActivityOneofCase.None : ActivityOneofCase.Copy;
      }
    }

    /// <summary>Field number for the "loadedFields" field.</summary>
    public const int LoadedFieldsFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LinNet.DatasetLineage.Types.LoadedFields LoadedFields {
      get { return activityCase_ == ActivityOneofCase.LoadedFields ? (global::LinNet.DatasetLineage.Types.LoadedFields) activity_ : null; }
      set {
        activity_ = value;
        activityCase_ = value == null ? ActivityOneofCase.None : ActivityOneofCase.LoadedFields;
      }
    }

    /// <summary>Field number for the "projection" field.</summary>
    public const int ProjectionFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LinNet.DatasetLineage.Types.FieldProjections Projection {
      get { return activityCase_ == ActivityOneofCase.Projection ? (global::LinNet.DatasetLineage.Types.FieldProjections) activity_ : null; }
      set {
        activity_ = value;
        activityCase_ = value == null ? ActivityOneofCase.None : ActivityOneofCase.Projection;
      }
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LinNet.DatasetLineage.Types.RowFilter Filter {
      get { return activityCase_ == ActivityOneofCase.Filter ? (global::LinNet.DatasetLineage.Types.RowFilter) activity_ : null; }
      set {
        activity_ = value;
        activityCase_ = value == null ? ActivityOneofCase.None : ActivityOneofCase.Filter;
      }
    }

    /// <summary>Field number for the "aggregation" field.</summary>
    public const int AggregationFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LinNet.DatasetLineage.Types.Aggregation Aggregation {
      get { return activityCase_ == ActivityOneofCase.Aggregation ? (global::LinNet.DatasetLineage.Types.Aggregation) activity_ : null; }
      set {
        activity_ = value;
        activityCase_ = value == null ? ActivityOneofCase.None : ActivityOneofCase.Aggregation;
      }
    }

    /// <summary>Field number for the "postAggFilter" field.</summary>
    public const int PostAggFilterFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LinNet.DatasetLineage.Types.RowFilter PostAggFilter {
      get { return activityCase_ == ActivityOneofCase.PostAggFilter ? (global::LinNet.DatasetLineage.Types.RowFilter) activity_ : null; }
      set {
        activity_ = value;
        activityCase_ = value == null ? ActivityOneofCase.None : ActivityOneofCase.PostAggFilter;
      }
    }

    /// <summary>Field number for the "union" field.</summary>
    public const int UnionFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LinNet.DatasetLineage.Types.DatasetUnion Union {
      get { return activityCase_ == ActivityOneofCase.Union ? (global::LinNet.DatasetLineage.Types.DatasetUnion) activity_ : null; }
      set {
        activity_ = value;
        activityCase_ = value == null ? ActivityOneofCase.None : ActivityOneofCase.Union;
      }
    }

    /// <summary>Field number for the "join" field.</summary>
    public const int JoinFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LinNet.DatasetLineage.Types.DatasetJoin Join {
      get { return activityCase_ == ActivityOneofCase.Join ? (global::LinNet.DatasetLineage.Types.DatasetJoin) activity_ : null; }
      set {
        activity_ = value;
        activityCase_ = value == null ? ActivityOneofCase.None : ActivityOneofCase.Join;
      }
    }

    private object activity_;
    /// <summary>Enum of possible cases for the "activity" oneof.</summary>
    public enum ActivityOneofCase {
      None = 0,
      Copy = 10,
      LoadedFields = 11,
      Projection = 12,
      Filter = 13,
      Aggregation = 14,
      PostAggFilter = 15,
      Union = 16,
      Join = 17,
    }
    private ActivityOneofCase activityCase_ = ActivityOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityOneofCase ActivityCase {
      get { return activityCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearActivity() {
      activityCase_ = ActivityOneofCase.None;
      activity_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DatasetLineage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DatasetLineage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Dataset, other.Dataset)) return false;
      if(!fields_.Equals(other.fields_)) return false;
      if (!object.Equals(Copy, other.Copy)) return false;
      if (!object.Equals(LoadedFields, other.LoadedFields)) return false;
      if (!object.Equals(Projection, other.Projection)) return false;
      if (!object.Equals(Filter, other.Filter)) return false;
      if (!object.Equals(Aggregation, other.Aggregation)) return false;
      if (!object.Equals(PostAggFilter, other.PostAggFilter)) return false;
      if (!object.Equals(Union, other.Union)) return false;
      if (!object.Equals(Join, other.Join)) return false;
      if (ActivityCase != other.ActivityCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dataset_ != null) hash ^= Dataset.GetHashCode();
      hash ^= fields_.GetHashCode();
      if (activityCase_ == ActivityOneofCase.Copy) hash ^= Copy.GetHashCode();
      if (activityCase_ == ActivityOneofCase.LoadedFields) hash ^= LoadedFields.GetHashCode();
      if (activityCase_ == ActivityOneofCase.Projection) hash ^= Projection.GetHashCode();
      if (activityCase_ == ActivityOneofCase.Filter) hash ^= Filter.GetHashCode();
      if (activityCase_ == ActivityOneofCase.Aggregation) hash ^= Aggregation.GetHashCode();
      if (activityCase_ == ActivityOneofCase.PostAggFilter) hash ^= PostAggFilter.GetHashCode();
      if (activityCase_ == ActivityOneofCase.Union) hash ^= Union.GetHashCode();
      if (activityCase_ == ActivityOneofCase.Join) hash ^= Join.GetHashCode();
      hash ^= (int) activityCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dataset_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Dataset);
      }
      fields_.WriteTo(output, _repeated_fields_codec);
      if (activityCase_ == ActivityOneofCase.Copy) {
        output.WriteRawTag(82);
        output.WriteMessage(Copy);
      }
      if (activityCase_ == ActivityOneofCase.LoadedFields) {
        output.WriteRawTag(90);
        output.WriteMessage(LoadedFields);
      }
      if (activityCase_ == ActivityOneofCase.Projection) {
        output.WriteRawTag(98);
        output.WriteMessage(Projection);
      }
      if (activityCase_ == ActivityOneofCase.Filter) {
        output.WriteRawTag(106);
        output.WriteMessage(Filter);
      }
      if (activityCase_ == ActivityOneofCase.Aggregation) {
        output.WriteRawTag(114);
        output.WriteMessage(Aggregation);
      }
      if (activityCase_ == ActivityOneofCase.PostAggFilter) {
        output.WriteRawTag(122);
        output.WriteMessage(PostAggFilter);
      }
      if (activityCase_ == ActivityOneofCase.Union) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Union);
      }
      if (activityCase_ == ActivityOneofCase.Join) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Join);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dataset_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dataset);
      }
      size += fields_.CalculateSize(_repeated_fields_codec);
      if (activityCase_ == ActivityOneofCase.Copy) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Copy);
      }
      if (activityCase_ == ActivityOneofCase.LoadedFields) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LoadedFields);
      }
      if (activityCase_ == ActivityOneofCase.Projection) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Projection);
      }
      if (activityCase_ == ActivityOneofCase.Filter) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Filter);
      }
      if (activityCase_ == ActivityOneofCase.Aggregation) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Aggregation);
      }
      if (activityCase_ == ActivityOneofCase.PostAggFilter) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PostAggFilter);
      }
      if (activityCase_ == ActivityOneofCase.Union) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Union);
      }
      if (activityCase_ == ActivityOneofCase.Join) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Join);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DatasetLineage other) {
      if (other == null) {
        return;
      }
      if (other.dataset_ != null) {
        if (dataset_ == null) {
          Dataset = new global::LinNet.DatasetInfo();
        }
        Dataset.MergeFrom(other.Dataset);
      }
      fields_.Add(other.fields_);
      switch (other.ActivityCase) {
        case ActivityOneofCase.Copy:
          if (Copy == null) {
            Copy = new global::LinNet.DatasetLineage.Types.DatasetCopy();
          }
          Copy.MergeFrom(other.Copy);
          break;
        case ActivityOneofCase.LoadedFields:
          if (LoadedFields == null) {
            LoadedFields = new global::LinNet.DatasetLineage.Types.LoadedFields();
          }
          LoadedFields.MergeFrom(other.LoadedFields);
          break;
        case ActivityOneofCase.Projection:
          if (Projection == null) {
            Projection = new global::LinNet.DatasetLineage.Types.FieldProjections();
          }
          Projection.MergeFrom(other.Projection);
          break;
        case ActivityOneofCase.Filter:
          if (Filter == null) {
            Filter = new global::LinNet.DatasetLineage.Types.RowFilter();
          }
          Filter.MergeFrom(other.Filter);
          break;
        case ActivityOneofCase.Aggregation:
          if (Aggregation == null) {
            Aggregation = new global::LinNet.DatasetLineage.Types.Aggregation();
          }
          Aggregation.MergeFrom(other.Aggregation);
          break;
        case ActivityOneofCase.PostAggFilter:
          if (PostAggFilter == null) {
            PostAggFilter = new global::LinNet.DatasetLineage.Types.RowFilter();
          }
          PostAggFilter.MergeFrom(other.PostAggFilter);
          break;
        case ActivityOneofCase.Union:
          if (Union == null) {
            Union = new global::LinNet.DatasetLineage.Types.DatasetUnion();
          }
          Union.MergeFrom(other.Union);
          break;
        case ActivityOneofCase.Join:
          if (Join == null) {
            Join = new global::LinNet.DatasetLineage.Types.DatasetJoin();
          }
          Join.MergeFrom(other.Join);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (dataset_ == null) {
              Dataset = new global::LinNet.DatasetInfo();
            }
            input.ReadMessage(Dataset);
            break;
          }
          case 18: {
            fields_.AddEntriesFrom(input, _repeated_fields_codec);
            break;
          }
          case 82: {
            global::LinNet.DatasetLineage.Types.DatasetCopy subBuilder = new global::LinNet.DatasetLineage.Types.DatasetCopy();
            if (activityCase_ == ActivityOneofCase.Copy) {
              subBuilder.MergeFrom(Copy);
            }
            input.ReadMessage(subBuilder);
            Copy = subBuilder;
            break;
          }
          case 90: {
            global::LinNet.DatasetLineage.Types.LoadedFields subBuilder = new global::LinNet.DatasetLineage.Types.LoadedFields();
            if (activityCase_ == ActivityOneofCase.LoadedFields) {
              subBuilder.MergeFrom(LoadedFields);
            }
            input.ReadMessage(subBuilder);
            LoadedFields = subBuilder;
            break;
          }
          case 98: {
            global::LinNet.DatasetLineage.Types.FieldProjections subBuilder = new global::LinNet.DatasetLineage.Types.FieldProjections();
            if (activityCase_ == ActivityOneofCase.Projection) {
              subBuilder.MergeFrom(Projection);
            }
            input.ReadMessage(subBuilder);
            Projection = subBuilder;
            break;
          }
          case 106: {
            global::LinNet.DatasetLineage.Types.RowFilter subBuilder = new global::LinNet.DatasetLineage.Types.RowFilter();
            if (activityCase_ == ActivityOneofCase.Filter) {
              subBuilder.MergeFrom(Filter);
            }
            input.ReadMessage(subBuilder);
            Filter = subBuilder;
            break;
          }
          case 114: {
            global::LinNet.DatasetLineage.Types.Aggregation subBuilder = new global::LinNet.DatasetLineage.Types.Aggregation();
            if (activityCase_ == ActivityOneofCase.Aggregation) {
              subBuilder.MergeFrom(Aggregation);
            }
            input.ReadMessage(subBuilder);
            Aggregation = subBuilder;
            break;
          }
          case 122: {
            global::LinNet.DatasetLineage.Types.RowFilter subBuilder = new global::LinNet.DatasetLineage.Types.RowFilter();
            if (activityCase_ == ActivityOneofCase.PostAggFilter) {
              subBuilder.MergeFrom(PostAggFilter);
            }
            input.ReadMessage(subBuilder);
            PostAggFilter = subBuilder;
            break;
          }
          case 130: {
            global::LinNet.DatasetLineage.Types.DatasetUnion subBuilder = new global::LinNet.DatasetLineage.Types.DatasetUnion();
            if (activityCase_ == ActivityOneofCase.Union) {
              subBuilder.MergeFrom(Union);
            }
            input.ReadMessage(subBuilder);
            Union = subBuilder;
            break;
          }
          case 138: {
            global::LinNet.DatasetLineage.Types.DatasetJoin subBuilder = new global::LinNet.DatasetLineage.Types.DatasetJoin();
            if (activityCase_ == ActivityOneofCase.Join) {
              subBuilder.MergeFrom(Join);
            }
            input.ReadMessage(subBuilder);
            Join = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DatasetLineage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class LoadedField : pb::IMessage<LoadedField> {
        private static readonly pb::MessageParser<LoadedField> _parser = new pb::MessageParser<LoadedField>(() => new LoadedField());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LoadedField> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LinNet.DatasetLineage.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LoadedField() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LoadedField(LoadedField other) : this() {
          field_ = other.field_ != null ? other.field_.Clone() : null;
          fieldSource_ = other.fieldSource_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LoadedField Clone() {
          return new LoadedField(this);
        }

        /// <summary>Field number for the "field" field.</summary>
        public const int FieldFieldNumber = 1;
        private global::LinNet.FieldDef field_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LinNet.FieldDef Field {
          get { return field_; }
          set {
            field_ = value;
          }
        }

        /// <summary>Field number for the "fieldSource" field.</summary>
        public const int FieldSourceFieldNumber = 2;
        private global::LinNet.LoadedFieldSource fieldSource_ = global::LinNet.LoadedFieldSource.Const;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LinNet.LoadedFieldSource FieldSource {
          get { return fieldSource_; }
          set {
            fieldSource_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as LoadedField);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LoadedField other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Field, other.Field)) return false;
          if (FieldSource != other.FieldSource) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (field_ != null) hash ^= Field.GetHashCode();
          if (FieldSource != global::LinNet.LoadedFieldSource.Const) hash ^= FieldSource.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (field_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Field);
          }
          if (FieldSource != global::LinNet.LoadedFieldSource.Const) {
            output.WriteRawTag(16);
            output.WriteEnum((int) FieldSource);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (field_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Field);
          }
          if (FieldSource != global::LinNet.LoadedFieldSource.Const) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FieldSource);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LoadedField other) {
          if (other == null) {
            return;
          }
          if (other.field_ != null) {
            if (field_ == null) {
              Field = new global::LinNet.FieldDef();
            }
            Field.MergeFrom(other.Field);
          }
          if (other.FieldSource != global::LinNet.LoadedFieldSource.Const) {
            FieldSource = other.FieldSource;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (field_ == null) {
                  Field = new global::LinNet.FieldDef();
                }
                input.ReadMessage(Field);
                break;
              }
              case 16: {
                FieldSource = (global::LinNet.LoadedFieldSource) input.ReadEnum();
                break;
              }
            }
          }
        }

      }

      public sealed partial class LoadedFields : pb::IMessage<LoadedFields> {
        private static readonly pb::MessageParser<LoadedFields> _parser = new pb::MessageParser<LoadedFields>(() => new LoadedFields());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LoadedFields> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LinNet.DatasetLineage.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LoadedFields() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LoadedFields(LoadedFields other) : this() {
          fields_ = other.fields_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LoadedFields Clone() {
          return new LoadedFields(this);
        }

        /// <summary>Field number for the "fields" field.</summary>
        public const int FieldsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::LinNet.DatasetLineage.Types.LoadedField> _repeated_fields_codec
            = pb::FieldCodec.ForMessage(10, global::LinNet.DatasetLineage.Types.LoadedField.Parser);
        private readonly pbc::RepeatedField<global::LinNet.DatasetLineage.Types.LoadedField> fields_ = new pbc::RepeatedField<global::LinNet.DatasetLineage.Types.LoadedField>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::LinNet.DatasetLineage.Types.LoadedField> Fields {
          get { return fields_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as LoadedFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LoadedFields other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!fields_.Equals(other.fields_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= fields_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          fields_.WriteTo(output, _repeated_fields_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += fields_.CalculateSize(_repeated_fields_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LoadedFields other) {
          if (other == null) {
            return;
          }
          fields_.Add(other.fields_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                fields_.AddEntriesFrom(input, _repeated_fields_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class DatasetCopy : pb::IMessage<DatasetCopy> {
        private static readonly pb::MessageParser<DatasetCopy> _parser = new pb::MessageParser<DatasetCopy>(() => new DatasetCopy());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DatasetCopy> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LinNet.DatasetLineage.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DatasetCopy() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DatasetCopy(DatasetCopy other) : this() {
          dataset_ = other.dataset_ != null ? other.dataset_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DatasetCopy Clone() {
          return new DatasetCopy(this);
        }

        /// <summary>Field number for the "dataset" field.</summary>
        public const int DatasetFieldNumber = 1;
        private global::LinNet.DatasetLineage dataset_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LinNet.DatasetLineage Dataset {
          get { return dataset_; }
          set {
            dataset_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DatasetCopy);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DatasetCopy other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Dataset, other.Dataset)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (dataset_ != null) hash ^= Dataset.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (dataset_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Dataset);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (dataset_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dataset);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DatasetCopy other) {
          if (other == null) {
            return;
          }
          if (other.dataset_ != null) {
            if (dataset_ == null) {
              Dataset = new global::LinNet.DatasetLineage();
            }
            Dataset.MergeFrom(other.Dataset);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (dataset_ == null) {
                  Dataset = new global::LinNet.DatasetLineage();
                }
                input.ReadMessage(Dataset);
                break;
              }
            }
          }
        }

      }

      public sealed partial class FieldProjection : pb::IMessage<FieldProjection> {
        private static readonly pb::MessageParser<FieldProjection> _parser = new pb::MessageParser<FieldProjection>(() => new FieldProjection());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FieldProjection> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LinNet.DatasetLineage.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FieldProjection() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FieldProjection(FieldProjection other) : this() {
          from_ = other.from_ != null ? other.from_.Clone() : null;
          to_ = other.to_ != null ? other.to_.Clone() : null;
          expression_ = other.expression_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FieldProjection Clone() {
          return new FieldProjection(this);
        }

        /// <summary>Field number for the "from" field.</summary>
        public const int FromFieldNumber = 1;
        private global::LinNet.FieldDef from_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LinNet.FieldDef From {
          get { return from_; }
          set {
            from_ = value;
          }
        }

        /// <summary>Field number for the "to" field.</summary>
        public const int ToFieldNumber = 2;
        private global::LinNet.FieldDef to_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LinNet.FieldDef To {
          get { return to_; }
          set {
            to_ = value;
          }
        }

        /// <summary>Field number for the "expression" field.</summary>
        public const int ExpressionFieldNumber = 5;
        private string expression_ = "";
        /// <summary>
        /// TODO: Temporal patch
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Expression {
          get { return expression_; }
          set {
            expression_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as FieldProjection);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FieldProjection other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(From, other.From)) return false;
          if (!object.Equals(To, other.To)) return false;
          if (Expression != other.Expression) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (from_ != null) hash ^= From.GetHashCode();
          if (to_ != null) hash ^= To.GetHashCode();
          if (Expression.Length != 0) hash ^= Expression.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (from_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(From);
          }
          if (to_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(To);
          }
          if (Expression.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(Expression);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (from_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(From);
          }
          if (to_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
          }
          if (Expression.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Expression);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FieldProjection other) {
          if (other == null) {
            return;
          }
          if (other.from_ != null) {
            if (from_ == null) {
              From = new global::LinNet.FieldDef();
            }
            From.MergeFrom(other.From);
          }
          if (other.to_ != null) {
            if (to_ == null) {
              To = new global::LinNet.FieldDef();
            }
            To.MergeFrom(other.To);
          }
          if (other.Expression.Length != 0) {
            Expression = other.Expression;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (from_ == null) {
                  From = new global::LinNet.FieldDef();
                }
                input.ReadMessage(From);
                break;
              }
              case 18: {
                if (to_ == null) {
                  To = new global::LinNet.FieldDef();
                }
                input.ReadMessage(To);
                break;
              }
              case 42: {
                Expression = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class FieldProjections : pb::IMessage<FieldProjections> {
        private static readonly pb::MessageParser<FieldProjections> _parser = new pb::MessageParser<FieldProjections>(() => new FieldProjections());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FieldProjections> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LinNet.DatasetLineage.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FieldProjections() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FieldProjections(FieldProjections other) : this() {
          dataset_ = other.dataset_ != null ? other.dataset_.Clone() : null;
          projections_ = other.projections_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FieldProjections Clone() {
          return new FieldProjections(this);
        }

        /// <summary>Field number for the "dataset" field.</summary>
        public const int DatasetFieldNumber = 1;
        private global::LinNet.DatasetLineage dataset_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LinNet.DatasetLineage Dataset {
          get { return dataset_; }
          set {
            dataset_ = value;
          }
        }

        /// <summary>Field number for the "projections" field.</summary>
        public const int ProjectionsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::LinNet.DatasetLineage.Types.FieldProjection> _repeated_projections_codec
            = pb::FieldCodec.ForMessage(18, global::LinNet.DatasetLineage.Types.FieldProjection.Parser);
        private readonly pbc::RepeatedField<global::LinNet.DatasetLineage.Types.FieldProjection> projections_ = new pbc::RepeatedField<global::LinNet.DatasetLineage.Types.FieldProjection>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::LinNet.DatasetLineage.Types.FieldProjection> Projections {
          get { return projections_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as FieldProjections);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FieldProjections other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Dataset, other.Dataset)) return false;
          if(!projections_.Equals(other.projections_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (dataset_ != null) hash ^= Dataset.GetHashCode();
          hash ^= projections_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (dataset_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Dataset);
          }
          projections_.WriteTo(output, _repeated_projections_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (dataset_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dataset);
          }
          size += projections_.CalculateSize(_repeated_projections_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FieldProjections other) {
          if (other == null) {
            return;
          }
          if (other.dataset_ != null) {
            if (dataset_ == null) {
              Dataset = new global::LinNet.DatasetLineage();
            }
            Dataset.MergeFrom(other.Dataset);
          }
          projections_.Add(other.projections_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (dataset_ == null) {
                  Dataset = new global::LinNet.DatasetLineage();
                }
                input.ReadMessage(Dataset);
                break;
              }
              case 18: {
                projections_.AddEntriesFrom(input, _repeated_projections_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class RowFilter : pb::IMessage<RowFilter> {
        private static readonly pb::MessageParser<RowFilter> _parser = new pb::MessageParser<RowFilter>(() => new RowFilter());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RowFilter> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LinNet.DatasetLineage.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RowFilter() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RowFilter(RowFilter other) : this() {
          dataset_ = other.dataset_ != null ? other.dataset_.Clone() : null;
          condition_ = other.condition_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RowFilter Clone() {
          return new RowFilter(this);
        }

        /// <summary>Field number for the "dataset" field.</summary>
        public const int DatasetFieldNumber = 1;
        private global::LinNet.DatasetLineage dataset_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LinNet.DatasetLineage Dataset {
          get { return dataset_; }
          set {
            dataset_ = value;
          }
        }

        /// <summary>Field number for the "condition" field.</summary>
        public const int ConditionFieldNumber = 2;
        private static readonly pb::FieldCodec<global::LinNet.RowFilterCondition> _repeated_condition_codec
            = pb::FieldCodec.ForMessage(18, global::LinNet.RowFilterCondition.Parser);
        private readonly pbc::RepeatedField<global::LinNet.RowFilterCondition> condition_ = new pbc::RepeatedField<global::LinNet.RowFilterCondition>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::LinNet.RowFilterCondition> Condition {
          get { return condition_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RowFilter);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RowFilter other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Dataset, other.Dataset)) return false;
          if(!condition_.Equals(other.condition_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (dataset_ != null) hash ^= Dataset.GetHashCode();
          hash ^= condition_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (dataset_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Dataset);
          }
          condition_.WriteTo(output, _repeated_condition_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (dataset_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dataset);
          }
          size += condition_.CalculateSize(_repeated_condition_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RowFilter other) {
          if (other == null) {
            return;
          }
          if (other.dataset_ != null) {
            if (dataset_ == null) {
              Dataset = new global::LinNet.DatasetLineage();
            }
            Dataset.MergeFrom(other.Dataset);
          }
          condition_.Add(other.condition_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (dataset_ == null) {
                  Dataset = new global::LinNet.DatasetLineage();
                }
                input.ReadMessage(Dataset);
                break;
              }
              case 18: {
                condition_.AddEntriesFrom(input, _repeated_condition_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class Aggregation : pb::IMessage<Aggregation> {
        private static readonly pb::MessageParser<Aggregation> _parser = new pb::MessageParser<Aggregation>(() => new Aggregation());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Aggregation> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LinNet.DatasetLineage.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Aggregation() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Aggregation(Aggregation other) : this() {
          dimension_ = other.dimension_ != null ? other.dimension_.Clone() : null;
          type_ = other.type_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Aggregation Clone() {
          return new Aggregation(this);
        }

        /// <summary>Field number for the "dimension" field.</summary>
        public const int DimensionFieldNumber = 1;
        private global::LinNet.AggregationDimension dimension_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LinNet.AggregationDimension Dimension {
          get { return dimension_; }
          set {
            dimension_ = value;
          }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 2;
        private global::LinNet.AggregationType type_ = global::LinNet.AggregationType.Sum;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LinNet.AggregationType Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Aggregation);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Aggregation other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Dimension, other.Dimension)) return false;
          if (Type != other.Type) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (dimension_ != null) hash ^= Dimension.GetHashCode();
          if (Type != global::LinNet.AggregationType.Sum) hash ^= Type.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (dimension_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Dimension);
          }
          if (Type != global::LinNet.AggregationType.Sum) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Type);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (dimension_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dimension);
          }
          if (Type != global::LinNet.AggregationType.Sum) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Aggregation other) {
          if (other == null) {
            return;
          }
          if (other.dimension_ != null) {
            if (dimension_ == null) {
              Dimension = new global::LinNet.AggregationDimension();
            }
            Dimension.MergeFrom(other.Dimension);
          }
          if (other.Type != global::LinNet.AggregationType.Sum) {
            Type = other.Type;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (dimension_ == null) {
                  Dimension = new global::LinNet.AggregationDimension();
                }
                input.ReadMessage(Dimension);
                break;
              }
              case 16: {
                Type = (global::LinNet.AggregationType) input.ReadEnum();
                break;
              }
            }
          }
        }

      }

      public sealed partial class DatasetUnion : pb::IMessage<DatasetUnion> {
        private static readonly pb::MessageParser<DatasetUnion> _parser = new pb::MessageParser<DatasetUnion>(() => new DatasetUnion());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DatasetUnion> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LinNet.DatasetLineage.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DatasetUnion() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DatasetUnion(DatasetUnion other) : this() {
          datasets_ = other.datasets_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DatasetUnion Clone() {
          return new DatasetUnion(this);
        }

        /// <summary>Field number for the "datasets" field.</summary>
        public const int DatasetsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::LinNet.DatasetLineage> _repeated_datasets_codec
            = pb::FieldCodec.ForMessage(10, global::LinNet.DatasetLineage.Parser);
        private readonly pbc::RepeatedField<global::LinNet.DatasetLineage> datasets_ = new pbc::RepeatedField<global::LinNet.DatasetLineage>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::LinNet.DatasetLineage> Datasets {
          get { return datasets_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DatasetUnion);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DatasetUnion other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!datasets_.Equals(other.datasets_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= datasets_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          datasets_.WriteTo(output, _repeated_datasets_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += datasets_.CalculateSize(_repeated_datasets_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DatasetUnion other) {
          if (other == null) {
            return;
          }
          datasets_.Add(other.datasets_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                datasets_.AddEntriesFrom(input, _repeated_datasets_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class DatasetJoin : pb::IMessage<DatasetJoin> {
        private static readonly pb::MessageParser<DatasetJoin> _parser = new pb::MessageParser<DatasetJoin>(() => new DatasetJoin());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DatasetJoin> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LinNet.DatasetLineage.Descriptor.NestedTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DatasetJoin() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DatasetJoin(DatasetJoin other) : this() {
          dataset_ = other.dataset_ != null ? other.dataset_.Clone() : null;
          joinType_ = other.joinType_;
          condition_ = other.condition_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DatasetJoin Clone() {
          return new DatasetJoin(this);
        }

        /// <summary>Field number for the "dataset" field.</summary>
        public const int DatasetFieldNumber = 1;
        private global::LinNet.DatasetId dataset_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LinNet.DatasetId Dataset {
          get { return dataset_; }
          set {
            dataset_ = value;
          }
        }

        /// <summary>Field number for the "joinType" field.</summary>
        public const int JoinTypeFieldNumber = 2;
        private global::LinNet.JoinType joinType_ = global::LinNet.JoinType.Inner;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LinNet.JoinType JoinType {
          get { return joinType_; }
          set {
            joinType_ = value;
          }
        }

        /// <summary>Field number for the "condition" field.</summary>
        public const int ConditionFieldNumber = 3;
        private static readonly pb::FieldCodec<global::LinNet.RowFilterCondition> _repeated_condition_codec
            = pb::FieldCodec.ForMessage(26, global::LinNet.RowFilterCondition.Parser);
        private readonly pbc::RepeatedField<global::LinNet.RowFilterCondition> condition_ = new pbc::RepeatedField<global::LinNet.RowFilterCondition>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::LinNet.RowFilterCondition> Condition {
          get { return condition_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DatasetJoin);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DatasetJoin other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Dataset, other.Dataset)) return false;
          if (JoinType != other.JoinType) return false;
          if(!condition_.Equals(other.condition_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (dataset_ != null) hash ^= Dataset.GetHashCode();
          if (JoinType != global::LinNet.JoinType.Inner) hash ^= JoinType.GetHashCode();
          hash ^= condition_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (dataset_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Dataset);
          }
          if (JoinType != global::LinNet.JoinType.Inner) {
            output.WriteRawTag(16);
            output.WriteEnum((int) JoinType);
          }
          condition_.WriteTo(output, _repeated_condition_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (dataset_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dataset);
          }
          if (JoinType != global::LinNet.JoinType.Inner) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) JoinType);
          }
          size += condition_.CalculateSize(_repeated_condition_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DatasetJoin other) {
          if (other == null) {
            return;
          }
          if (other.dataset_ != null) {
            if (dataset_ == null) {
              Dataset = new global::LinNet.DatasetId();
            }
            Dataset.MergeFrom(other.Dataset);
          }
          if (other.JoinType != global::LinNet.JoinType.Inner) {
            JoinType = other.JoinType;
          }
          condition_.Add(other.condition_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (dataset_ == null) {
                  Dataset = new global::LinNet.DatasetId();
                }
                input.ReadMessage(Dataset);
                break;
              }
              case 16: {
                JoinType = (global::LinNet.JoinType) input.ReadEnum();
                break;
              }
              case 26: {
                condition_.AddEntriesFrom(input, _repeated_condition_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class DatasetId : pb::IMessage<DatasetId> {
    private static readonly pb::MessageParser<DatasetId> _parser = new pb::MessageParser<DatasetId>(() => new DatasetId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DatasetId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LinNet.LinReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatasetId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatasetId(DatasetId other) : this() {
      uid_ = other.uid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatasetId Clone() {
      return new DatasetId(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private string uid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DatasetId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DatasetId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DatasetId other) {
      if (other == null) {
        return;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DatasetState : pb::IMessage<DatasetState> {
    private static readonly pb::MessageParser<DatasetState> _parser = new pb::MessageParser<DatasetState>(() => new DatasetState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DatasetState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LinNet.LinReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatasetState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatasetState(DatasetState other) : this() {
      switch (other.StateCase) {
        case StateOneofCase.Creating:
          Creating = other.Creating.Clone();
          break;
        case StateOneofCase.Private:
          Private = other.Private.Clone();
          break;
        case StateOneofCase.Controls:
          Controls = other.Controls.Clone();
          break;
        case StateOneofCase.Curating:
          Curating = other.Curating.Clone();
          break;
        case StateOneofCase.Governed:
          Governed = other.Governed.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatasetState Clone() {
      return new DatasetState(this);
    }

    /// <summary>Field number for the "creating" field.</summary>
    public const int CreatingFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LinNet.DatasetState.Types.Creating Creating {
      get { return stateCase_ == StateOneofCase.Creating ? (global::LinNet.DatasetState.Types.Creating) state_ : null; }
      set {
        state_ = value;
        stateCase_ = value == null ? StateOneofCase.None : StateOneofCase.Creating;
      }
    }

    /// <summary>Field number for the "private" field.</summary>
    public const int PrivateFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Empty Private {
      get { return stateCase_ == StateOneofCase.Private ? (global::Google.Protobuf.WellKnownTypes.Empty) state_ : null; }
      set {
        state_ = value;
        stateCase_ = value == null ? StateOneofCase.None : StateOneofCase.Private;
      }
    }

    /// <summary>Field number for the "controls" field.</summary>
    public const int ControlsFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LinNet.DatasetState.Types.InControlsValidation Controls {
      get { return stateCase_ == StateOneofCase.Controls ? (global::LinNet.DatasetState.Types.InControlsValidation) state_ : null; }
      set {
        state_ = value;
        stateCase_ = value == null ? StateOneofCase.None : StateOneofCase.Controls;
      }
    }

    /// <summary>Field number for the "curating" field.</summary>
    public const int CuratingFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LinNet.DatasetState.Types.Curating Curating {
      get { return stateCase_ == StateOneofCase.Curating ? (global::LinNet.DatasetState.Types.Curating) state_ : null; }
      set {
        state_ = value;
        stateCase_ = value == null ? StateOneofCase.None : StateOneofCase.Curating;
      }
    }

    /// <summary>Field number for the "governed" field.</summary>
    public const int GovernedFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LinNet.DatasetState.Types.Governed Governed {
      get { return stateCase_ == StateOneofCase.Governed ? (global::LinNet.DatasetState.Types.Governed) state_ : null; }
      set {
        state_ = value;
        stateCase_ = value == null ? StateOneofCase.None : StateOneofCase.Governed;
      }
    }

    private object state_;
    /// <summary>Enum of possible cases for the "state" oneof.</summary>
    public enum StateOneofCase {
      None = 0,
      Creating = 1,
      Private = 2,
      Controls = 3,
      Curating = 4,
      Governed = 5,
    }
    private StateOneofCase stateCase_ = StateOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateOneofCase StateCase {
      get { return stateCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearState() {
      stateCase_ = StateOneofCase.None;
      state_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DatasetState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DatasetState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Creating, other.Creating)) return false;
      if (!object.Equals(Private, other.Private)) return false;
      if (!object.Equals(Controls, other.Controls)) return false;
      if (!object.Equals(Curating, other.Curating)) return false;
      if (!object.Equals(Governed, other.Governed)) return false;
      if (StateCase != other.StateCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (stateCase_ == StateOneofCase.Creating) hash ^= Creating.GetHashCode();
      if (stateCase_ == StateOneofCase.Private) hash ^= Private.GetHashCode();
      if (stateCase_ == StateOneofCase.Controls) hash ^= Controls.GetHashCode();
      if (stateCase_ == StateOneofCase.Curating) hash ^= Curating.GetHashCode();
      if (stateCase_ == StateOneofCase.Governed) hash ^= Governed.GetHashCode();
      hash ^= (int) stateCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (stateCase_ == StateOneofCase.Creating) {
        output.WriteRawTag(10);
        output.WriteMessage(Creating);
      }
      if (stateCase_ == StateOneofCase.Private) {
        output.WriteRawTag(18);
        output.WriteMessage(Private);
      }
      if (stateCase_ == StateOneofCase.Controls) {
        output.WriteRawTag(26);
        output.WriteMessage(Controls);
      }
      if (stateCase_ == StateOneofCase.Curating) {
        output.WriteRawTag(34);
        output.WriteMessage(Curating);
      }
      if (stateCase_ == StateOneofCase.Governed) {
        output.WriteRawTag(42);
        output.WriteMessage(Governed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (stateCase_ == StateOneofCase.Creating) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Creating);
      }
      if (stateCase_ == StateOneofCase.Private) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Private);
      }
      if (stateCase_ == StateOneofCase.Controls) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Controls);
      }
      if (stateCase_ == StateOneofCase.Curating) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Curating);
      }
      if (stateCase_ == StateOneofCase.Governed) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Governed);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DatasetState other) {
      if (other == null) {
        return;
      }
      switch (other.StateCase) {
        case StateOneofCase.Creating:
          if (Creating == null) {
            Creating = new global::LinNet.DatasetState.Types.Creating();
          }
          Creating.MergeFrom(other.Creating);
          break;
        case StateOneofCase.Private:
          if (Private == null) {
            Private = new global::Google.Protobuf.WellKnownTypes.Empty();
          }
          Private.MergeFrom(other.Private);
          break;
        case StateOneofCase.Controls:
          if (Controls == null) {
            Controls = new global::LinNet.DatasetState.Types.InControlsValidation();
          }
          Controls.MergeFrom(other.Controls);
          break;
        case StateOneofCase.Curating:
          if (Curating == null) {
            Curating = new global::LinNet.DatasetState.Types.Curating();
          }
          Curating.MergeFrom(other.Curating);
          break;
        case StateOneofCase.Governed:
          if (Governed == null) {
            Governed = new global::LinNet.DatasetState.Types.Governed();
          }
          Governed.MergeFrom(other.Governed);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::LinNet.DatasetState.Types.Creating subBuilder = new global::LinNet.DatasetState.Types.Creating();
            if (stateCase_ == StateOneofCase.Creating) {
              subBuilder.MergeFrom(Creating);
            }
            input.ReadMessage(subBuilder);
            Creating = subBuilder;
            break;
          }
          case 18: {
            global::Google.Protobuf.WellKnownTypes.Empty subBuilder = new global::Google.Protobuf.WellKnownTypes.Empty();
            if (stateCase_ == StateOneofCase.Private) {
              subBuilder.MergeFrom(Private);
            }
            input.ReadMessage(subBuilder);
            Private = subBuilder;
            break;
          }
          case 26: {
            global::LinNet.DatasetState.Types.InControlsValidation subBuilder = new global::LinNet.DatasetState.Types.InControlsValidation();
            if (stateCase_ == StateOneofCase.Controls) {
              subBuilder.MergeFrom(Controls);
            }
            input.ReadMessage(subBuilder);
            Controls = subBuilder;
            break;
          }
          case 34: {
            global::LinNet.DatasetState.Types.Curating subBuilder = new global::LinNet.DatasetState.Types.Curating();
            if (stateCase_ == StateOneofCase.Curating) {
              subBuilder.MergeFrom(Curating);
            }
            input.ReadMessage(subBuilder);
            Curating = subBuilder;
            break;
          }
          case 42: {
            global::LinNet.DatasetState.Types.Governed subBuilder = new global::LinNet.DatasetState.Types.Governed();
            if (stateCase_ == StateOneofCase.Governed) {
              subBuilder.MergeFrom(Governed);
            }
            input.ReadMessage(subBuilder);
            Governed = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DatasetState message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Creating : pb::IMessage<Creating> {
        private static readonly pb::MessageParser<Creating> _parser = new pb::MessageParser<Creating>(() => new Creating());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Creating> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LinNet.DatasetState.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Creating() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Creating(Creating other) : this() {
          submittedAt_ = other.submittedAt_ != null ? other.submittedAt_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Creating Clone() {
          return new Creating(this);
        }

        /// <summary>Field number for the "submittedAt" field.</summary>
        public const int SubmittedAtFieldNumber = 1;
        private global::Google.Protobuf.WellKnownTypes.Timestamp submittedAt_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Timestamp SubmittedAt {
          get { return submittedAt_; }
          set {
            submittedAt_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Creating);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Creating other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(SubmittedAt, other.SubmittedAt)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (submittedAt_ != null) hash ^= SubmittedAt.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (submittedAt_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(SubmittedAt);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (submittedAt_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(SubmittedAt);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Creating other) {
          if (other == null) {
            return;
          }
          if (other.submittedAt_ != null) {
            if (submittedAt_ == null) {
              SubmittedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            SubmittedAt.MergeFrom(other.SubmittedAt);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (submittedAt_ == null) {
                  SubmittedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(SubmittedAt);
                break;
              }
            }
          }
        }

      }

      public sealed partial class Curating : pb::IMessage<Curating> {
        private static readonly pb::MessageParser<Curating> _parser = new pb::MessageParser<Curating>(() => new Curating());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Curating> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LinNet.DatasetState.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Curating() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Curating(Curating other) : this() {
          submittedAt_ = other.submittedAt_ != null ? other.submittedAt_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Curating Clone() {
          return new Curating(this);
        }

        /// <summary>Field number for the "submittedAt" field.</summary>
        public const int SubmittedAtFieldNumber = 1;
        private global::Google.Protobuf.WellKnownTypes.Timestamp submittedAt_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Timestamp SubmittedAt {
          get { return submittedAt_; }
          set {
            submittedAt_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Curating);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Curating other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(SubmittedAt, other.SubmittedAt)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (submittedAt_ != null) hash ^= SubmittedAt.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (submittedAt_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(SubmittedAt);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (submittedAt_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(SubmittedAt);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Curating other) {
          if (other == null) {
            return;
          }
          if (other.submittedAt_ != null) {
            if (submittedAt_ == null) {
              SubmittedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            SubmittedAt.MergeFrom(other.SubmittedAt);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (submittedAt_ == null) {
                  SubmittedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(SubmittedAt);
                break;
              }
            }
          }
        }

      }

      public sealed partial class InControlsValidation : pb::IMessage<InControlsValidation> {
        private static readonly pb::MessageParser<InControlsValidation> _parser = new pb::MessageParser<InControlsValidation>(() => new InControlsValidation());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<InControlsValidation> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LinNet.DatasetState.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InControlsValidation() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InControlsValidation(InControlsValidation other) : this() {
          submittedAt_ = other.submittedAt_ != null ? other.submittedAt_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InControlsValidation Clone() {
          return new InControlsValidation(this);
        }

        /// <summary>Field number for the "submittedAt" field.</summary>
        public const int SubmittedAtFieldNumber = 1;
        private global::Google.Protobuf.WellKnownTypes.Timestamp submittedAt_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Timestamp SubmittedAt {
          get { return submittedAt_; }
          set {
            submittedAt_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as InControlsValidation);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(InControlsValidation other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(SubmittedAt, other.SubmittedAt)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (submittedAt_ != null) hash ^= SubmittedAt.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (submittedAt_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(SubmittedAt);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (submittedAt_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(SubmittedAt);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(InControlsValidation other) {
          if (other == null) {
            return;
          }
          if (other.submittedAt_ != null) {
            if (submittedAt_ == null) {
              SubmittedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            SubmittedAt.MergeFrom(other.SubmittedAt);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (submittedAt_ == null) {
                  SubmittedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(SubmittedAt);
                break;
              }
            }
          }
        }

      }

      public sealed partial class Governed : pb::IMessage<Governed> {
        private static readonly pb::MessageParser<Governed> _parser = new pb::MessageParser<Governed>(() => new Governed());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Governed> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LinNet.DatasetState.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Governed() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Governed(Governed other) : this() {
          approvedAt_ = other.approvedAt_ != null ? other.approvedAt_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Governed Clone() {
          return new Governed(this);
        }

        /// <summary>Field number for the "approvedAt" field.</summary>
        public const int ApprovedAtFieldNumber = 1;
        private global::Google.Protobuf.WellKnownTypes.Timestamp approvedAt_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Timestamp ApprovedAt {
          get { return approvedAt_; }
          set {
            approvedAt_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Governed);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Governed other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(ApprovedAt, other.ApprovedAt)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (approvedAt_ != null) hash ^= ApprovedAt.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (approvedAt_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(ApprovedAt);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (approvedAt_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ApprovedAt);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Governed other) {
          if (other == null) {
            return;
          }
          if (other.approvedAt_ != null) {
            if (approvedAt_ == null) {
              ApprovedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            ApprovedAt.MergeFrom(other.ApprovedAt);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (approvedAt_ == null) {
                  ApprovedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(ApprovedAt);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class DatasetInfo : pb::IMessage<DatasetInfo> {
    private static readonly pb::MessageParser<DatasetInfo> _parser = new pb::MessageParser<DatasetInfo>(() => new DatasetInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DatasetInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LinNet.LinReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatasetInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatasetInfo(DatasetInfo other) : this() {
      datasetId_ = other.datasetId_ != null ? other.datasetId_.Clone() : null;
      name_ = other.name_;
      owner_ = other.owner_ != null ? other.owner_.Clone() : null;
      createdBy_ = other.createdBy_ != null ? other.createdBy_.Clone() : null;
      createdAt_ = other.createdAt_ != null ? other.createdAt_.Clone() : null;
      size_ = other.size_;
      description_ = other.description_;
      rating_ = other.rating_ != null ? other.rating_.Clone() : null;
      comments_ = other.comments_.Clone();
      tags_ = other.tags_.Clone();
      persistedTo_ = other.persistedTo_;
      datasetState_ = other.datasetState_ != null ? other.datasetState_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatasetInfo Clone() {
      return new DatasetInfo(this);
    }

    /// <summary>Field number for the "datasetId" field.</summary>
    public const int DatasetIdFieldNumber = 1;
    private global::LinNet.DatasetId datasetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LinNet.DatasetId DatasetId {
      get { return datasetId_; }
      set {
        datasetId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 3;
    private global::LinNet.User owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LinNet.User Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "createdBy" field.</summary>
    public const int CreatedByFieldNumber = 4;
    private global::LinNet.User createdBy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LinNet.User CreatedBy {
      get { return createdBy_; }
      set {
        createdBy_ = value;
      }
    }

    /// <summary>Field number for the "createdAt" field.</summary>
    public const int CreatedAtFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createdAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 6;
    private uint size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 7;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rating" field.</summary>
    public const int RatingFieldNumber = 8;
    private global::LinNet.DatasetInfo.Types.Rating rating_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LinNet.DatasetInfo.Types.Rating Rating {
      get { return rating_; }
      set {
        rating_ = value;
      }
    }

    /// <summary>Field number for the "comments" field.</summary>
    public const int CommentsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::LinNet.DatasetInfo.Types.Comment> _repeated_comments_codec
        = pb::FieldCodec.ForMessage(74, global::LinNet.DatasetInfo.Types.Comment.Parser);
    private readonly pbc::RepeatedField<global::LinNet.DatasetInfo.Types.Comment> comments_ = new pbc::RepeatedField<global::LinNet.DatasetInfo.Types.Comment>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LinNet.DatasetInfo.Types.Comment> Comments {
      get { return comments_; }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::LinNet.DatasetInfo.Types.Tag> _repeated_tags_codec
        = pb::FieldCodec.ForMessage(82, global::LinNet.DatasetInfo.Types.Tag.Parser);
    private readonly pbc::RepeatedField<global::LinNet.DatasetInfo.Types.Tag> tags_ = new pbc::RepeatedField<global::LinNet.DatasetInfo.Types.Tag>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LinNet.DatasetInfo.Types.Tag> Tags {
      get { return tags_; }
    }

    /// <summary>Field number for the "persistedTo" field.</summary>
    public const int PersistedToFieldNumber = 20;
    private global::LinNet.DatasetInfo.Types.PersistenceType persistedTo_ = global::LinNet.DatasetInfo.Types.PersistenceType.Memory;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LinNet.DatasetInfo.Types.PersistenceType PersistedTo {
      get { return persistedTo_; }
      set {
        persistedTo_ = value;
      }
    }

    /// <summary>Field number for the "datasetState" field.</summary>
    public const int DatasetStateFieldNumber = 100;
    private global::LinNet.DatasetState datasetState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LinNet.DatasetState DatasetState {
      get { return datasetState_; }
      set {
        datasetState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DatasetInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DatasetInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DatasetId, other.DatasetId)) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(Owner, other.Owner)) return false;
      if (!object.Equals(CreatedBy, other.CreatedBy)) return false;
      if (!object.Equals(CreatedAt, other.CreatedAt)) return false;
      if (Size != other.Size) return false;
      if (Description != other.Description) return false;
      if (!object.Equals(Rating, other.Rating)) return false;
      if(!comments_.Equals(other.comments_)) return false;
      if(!tags_.Equals(other.tags_)) return false;
      if (PersistedTo != other.PersistedTo) return false;
      if (!object.Equals(DatasetState, other.DatasetState)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (datasetId_ != null) hash ^= DatasetId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (owner_ != null) hash ^= Owner.GetHashCode();
      if (createdBy_ != null) hash ^= CreatedBy.GetHashCode();
      if (createdAt_ != null) hash ^= CreatedAt.GetHashCode();
      if (Size != 0) hash ^= Size.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (rating_ != null) hash ^= Rating.GetHashCode();
      hash ^= comments_.GetHashCode();
      hash ^= tags_.GetHashCode();
      if (PersistedTo != global::LinNet.DatasetInfo.Types.PersistenceType.Memory) hash ^= PersistedTo.GetHashCode();
      if (datasetState_ != null) hash ^= DatasetState.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (datasetId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DatasetId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (owner_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Owner);
      }
      if (createdBy_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CreatedBy);
      }
      if (createdAt_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(CreatedAt);
      }
      if (Size != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Size);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Description);
      }
      if (rating_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Rating);
      }
      comments_.WriteTo(output, _repeated_comments_codec);
      tags_.WriteTo(output, _repeated_tags_codec);
      if (PersistedTo != global::LinNet.DatasetInfo.Types.PersistenceType.Memory) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) PersistedTo);
      }
      if (datasetState_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(DatasetState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (datasetId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DatasetId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (createdBy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedBy);
      }
      if (createdAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedAt);
      }
      if (Size != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Size);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (rating_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rating);
      }
      size += comments_.CalculateSize(_repeated_comments_codec);
      size += tags_.CalculateSize(_repeated_tags_codec);
      if (PersistedTo != global::LinNet.DatasetInfo.Types.PersistenceType.Memory) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PersistedTo);
      }
      if (datasetState_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DatasetState);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DatasetInfo other) {
      if (other == null) {
        return;
      }
      if (other.datasetId_ != null) {
        if (datasetId_ == null) {
          DatasetId = new global::LinNet.DatasetId();
        }
        DatasetId.MergeFrom(other.DatasetId);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.owner_ != null) {
        if (owner_ == null) {
          Owner = new global::LinNet.User();
        }
        Owner.MergeFrom(other.Owner);
      }
      if (other.createdBy_ != null) {
        if (createdBy_ == null) {
          CreatedBy = new global::LinNet.User();
        }
        CreatedBy.MergeFrom(other.CreatedBy);
      }
      if (other.createdAt_ != null) {
        if (createdAt_ == null) {
          CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreatedAt.MergeFrom(other.CreatedAt);
      }
      if (other.Size != 0) {
        Size = other.Size;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.rating_ != null) {
        if (rating_ == null) {
          Rating = new global::LinNet.DatasetInfo.Types.Rating();
        }
        Rating.MergeFrom(other.Rating);
      }
      comments_.Add(other.comments_);
      tags_.Add(other.tags_);
      if (other.PersistedTo != global::LinNet.DatasetInfo.Types.PersistenceType.Memory) {
        PersistedTo = other.PersistedTo;
      }
      if (other.datasetState_ != null) {
        if (datasetState_ == null) {
          DatasetState = new global::LinNet.DatasetState();
        }
        DatasetState.MergeFrom(other.DatasetState);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (datasetId_ == null) {
              DatasetId = new global::LinNet.DatasetId();
            }
            input.ReadMessage(DatasetId);
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            if (owner_ == null) {
              Owner = new global::LinNet.User();
            }
            input.ReadMessage(Owner);
            break;
          }
          case 34: {
            if (createdBy_ == null) {
              CreatedBy = new global::LinNet.User();
            }
            input.ReadMessage(CreatedBy);
            break;
          }
          case 42: {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedAt);
            break;
          }
          case 48: {
            Size = input.ReadUInt32();
            break;
          }
          case 58: {
            Description = input.ReadString();
            break;
          }
          case 66: {
            if (rating_ == null) {
              Rating = new global::LinNet.DatasetInfo.Types.Rating();
            }
            input.ReadMessage(Rating);
            break;
          }
          case 74: {
            comments_.AddEntriesFrom(input, _repeated_comments_codec);
            break;
          }
          case 82: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
          case 160: {
            PersistedTo = (global::LinNet.DatasetInfo.Types.PersistenceType) input.ReadEnum();
            break;
          }
          case 802: {
            if (datasetState_ == null) {
              DatasetState = new global::LinNet.DatasetState();
            }
            input.ReadMessage(DatasetState);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DatasetInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum PersistenceType {
        [pbr::OriginalName("Memory")] Memory = 0,
        [pbr::OriginalName("RocksDb")] RocksDb = 1,
        [pbr::OriginalName("Parquet")] Parquet = 2,
      }

      public sealed partial class Rating : pb::IMessage<Rating> {
        private static readonly pb::MessageParser<Rating> _parser = new pb::MessageParser<Rating>(() => new Rating());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Rating> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LinNet.DatasetInfo.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Rating() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Rating(Rating other) : this() {
          stars_ = other.stars_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Rating Clone() {
          return new Rating(this);
        }

        /// <summary>Field number for the "stars" field.</summary>
        public const int StarsFieldNumber = 1;
        private global::LinNet.DatasetInfo.Types.Rating.Types.Stars stars_ = global::LinNet.DatasetInfo.Types.Rating.Types.Stars.Zero;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LinNet.DatasetInfo.Types.Rating.Types.Stars Stars {
          get { return stars_; }
          set {
            stars_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Rating);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Rating other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Stars != other.Stars) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Stars != global::LinNet.DatasetInfo.Types.Rating.Types.Stars.Zero) hash ^= Stars.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Stars != global::LinNet.DatasetInfo.Types.Rating.Types.Stars.Zero) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Stars);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Stars != global::LinNet.DatasetInfo.Types.Rating.Types.Stars.Zero) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Stars);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Rating other) {
          if (other == null) {
            return;
          }
          if (other.Stars != global::LinNet.DatasetInfo.Types.Rating.Types.Stars.Zero) {
            Stars = other.Stars;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Stars = (global::LinNet.DatasetInfo.Types.Rating.Types.Stars) input.ReadEnum();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Rating message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum Stars {
            [pbr::OriginalName("ZERO")] Zero = 0,
            [pbr::OriginalName("ONE")] One = 1,
            [pbr::OriginalName("TWO")] Two = 2,
            [pbr::OriginalName("THREE")] Three = 3,
            [pbr::OriginalName("FOUR")] Four = 4,
            [pbr::OriginalName("FIVE")] Five = 5,
          }

        }
        #endregion

      }

      public sealed partial class Comment : pb::IMessage<Comment> {
        private static readonly pb::MessageParser<Comment> _parser = new pb::MessageParser<Comment>(() => new Comment());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Comment> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LinNet.DatasetInfo.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Comment() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Comment(Comment other) : this() {
          user_ = other.user_ != null ? other.user_.Clone() : null;
          comment_ = other.comment_;
          rating_ = other.rating_ != null ? other.rating_.Clone() : null;
          createdAt_ = other.createdAt_ != null ? other.createdAt_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Comment Clone() {
          return new Comment(this);
        }

        /// <summary>Field number for the "user" field.</summary>
        public const int UserFieldNumber = 1;
        private global::LinNet.User user_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LinNet.User User {
          get { return user_; }
          set {
            user_ = value;
          }
        }

        /// <summary>Field number for the "comment" field.</summary>
        public const int Comment_FieldNumber = 2;
        private string comment_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Comment_ {
          get { return comment_; }
          set {
            comment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "rating" field.</summary>
        public const int RatingFieldNumber = 3;
        private global::LinNet.DatasetInfo.Types.Rating rating_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LinNet.DatasetInfo.Types.Rating Rating {
          get { return rating_; }
          set {
            rating_ = value;
          }
        }

        /// <summary>Field number for the "createdAt" field.</summary>
        public const int CreatedAtFieldNumber = 5;
        private global::Google.Protobuf.WellKnownTypes.Timestamp createdAt_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Timestamp CreatedAt {
          get { return createdAt_; }
          set {
            createdAt_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Comment);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Comment other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(User, other.User)) return false;
          if (Comment_ != other.Comment_) return false;
          if (!object.Equals(Rating, other.Rating)) return false;
          if (!object.Equals(CreatedAt, other.CreatedAt)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (user_ != null) hash ^= User.GetHashCode();
          if (Comment_.Length != 0) hash ^= Comment_.GetHashCode();
          if (rating_ != null) hash ^= Rating.GetHashCode();
          if (createdAt_ != null) hash ^= CreatedAt.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (user_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(User);
          }
          if (Comment_.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Comment_);
          }
          if (rating_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Rating);
          }
          if (createdAt_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(CreatedAt);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (user_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
          }
          if (Comment_.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Comment_);
          }
          if (rating_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rating);
          }
          if (createdAt_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedAt);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Comment other) {
          if (other == null) {
            return;
          }
          if (other.user_ != null) {
            if (user_ == null) {
              User = new global::LinNet.User();
            }
            User.MergeFrom(other.User);
          }
          if (other.Comment_.Length != 0) {
            Comment_ = other.Comment_;
          }
          if (other.rating_ != null) {
            if (rating_ == null) {
              Rating = new global::LinNet.DatasetInfo.Types.Rating();
            }
            Rating.MergeFrom(other.Rating);
          }
          if (other.createdAt_ != null) {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            CreatedAt.MergeFrom(other.CreatedAt);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (user_ == null) {
                  User = new global::LinNet.User();
                }
                input.ReadMessage(User);
                break;
              }
              case 18: {
                Comment_ = input.ReadString();
                break;
              }
              case 26: {
                if (rating_ == null) {
                  Rating = new global::LinNet.DatasetInfo.Types.Rating();
                }
                input.ReadMessage(Rating);
                break;
              }
              case 42: {
                if (createdAt_ == null) {
                  CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(CreatedAt);
                break;
              }
            }
          }
        }

      }

      public sealed partial class Tag : pb::IMessage<Tag> {
        private static readonly pb::MessageParser<Tag> _parser = new pb::MessageParser<Tag>(() => new Tag());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Tag> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LinNet.DatasetInfo.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Tag() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Tag(Tag other) : this() {
          tag_ = other.tag_;
          category_ = other.category_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Tag Clone() {
          return new Tag(this);
        }

        /// <summary>Field number for the "tag" field.</summary>
        public const int Tag_FieldNumber = 1;
        private string tag_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Tag_ {
          get { return tag_; }
          set {
            tag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "category" field.</summary>
        public const int CategoryFieldNumber = 2;
        private global::LinNet.DatasetInfo.Types.Tag.Types.Category category_ = global::LinNet.DatasetInfo.Types.Tag.Types.Category.Default;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LinNet.DatasetInfo.Types.Tag.Types.Category Category {
          get { return category_; }
          set {
            category_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Tag);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Tag other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Tag_ != other.Tag_) return false;
          if (Category != other.Category) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Tag_.Length != 0) hash ^= Tag_.GetHashCode();
          if (Category != global::LinNet.DatasetInfo.Types.Tag.Types.Category.Default) hash ^= Category.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Tag_.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Tag_);
          }
          if (Category != global::LinNet.DatasetInfo.Types.Tag.Types.Category.Default) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Category);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Tag_.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Tag_);
          }
          if (Category != global::LinNet.DatasetInfo.Types.Tag.Types.Category.Default) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Category);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Tag other) {
          if (other == null) {
            return;
          }
          if (other.Tag_.Length != 0) {
            Tag_ = other.Tag_;
          }
          if (other.Category != global::LinNet.DatasetInfo.Types.Tag.Types.Category.Default) {
            Category = other.Category;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Tag_ = input.ReadString();
                break;
              }
              case 16: {
                Category = (global::LinNet.DatasetInfo.Types.Tag.Types.Category) input.ReadEnum();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Tag message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum Category {
            [pbr::OriginalName("DEFAULT")] Default = 0,
            [pbr::OriginalName("DATASET_NAME")] DatasetName = 1,
            [pbr::OriginalName("ON_PREM")] OnPrem = 2,
            [pbr::OriginalName("CLOUD")] Cloud = 3,
            [pbr::OriginalName("PROD")] Prod = 4,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class FieldDef : pb::IMessage<FieldDef> {
    private static readonly pb::MessageParser<FieldDef> _parser = new pb::MessageParser<FieldDef>(() => new FieldDef());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FieldDef> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LinNet.LinReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldDef() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldDef(FieldDef other) : this() {
      name_ = other.name_;
      datasetId_ = other.datasetId_ != null ? other.datasetId_.Clone() : null;
      type_ = other.type_;
      optionalField_ = other.optionalField_;
      defaultValue_ = other.defaultValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldDef Clone() {
      return new FieldDef(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "datasetId" field.</summary>
    public const int DatasetIdFieldNumber = 2;
    private global::LinNet.DatasetId datasetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LinNet.DatasetId DatasetId {
      get { return datasetId_; }
      set {
        datasetId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::LinNet.FieldType type_ = global::LinNet.FieldType.String;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LinNet.FieldType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "optionalField" field.</summary>
    public const int OptionalFieldFieldNumber = 4;
    private bool optionalField_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OptionalField {
      get { return optionalField_; }
      set {
        optionalField_ = value;
      }
    }

    /// <summary>Field number for the "defaultValue" field.</summary>
    public const int DefaultValueFieldNumber = 5;
    private string defaultValue_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DefaultValue {
      get { return defaultValue_; }
      set {
        defaultValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FieldDef);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FieldDef other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(DatasetId, other.DatasetId)) return false;
      if (Type != other.Type) return false;
      if (OptionalField != other.OptionalField) return false;
      if (DefaultValue != other.DefaultValue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (datasetId_ != null) hash ^= DatasetId.GetHashCode();
      if (Type != global::LinNet.FieldType.String) hash ^= Type.GetHashCode();
      if (OptionalField != false) hash ^= OptionalField.GetHashCode();
      if (DefaultValue.Length != 0) hash ^= DefaultValue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (datasetId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DatasetId);
      }
      if (Type != global::LinNet.FieldType.String) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (OptionalField != false) {
        output.WriteRawTag(32);
        output.WriteBool(OptionalField);
      }
      if (DefaultValue.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DefaultValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (datasetId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DatasetId);
      }
      if (Type != global::LinNet.FieldType.String) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (OptionalField != false) {
        size += 1 + 1;
      }
      if (DefaultValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DefaultValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FieldDef other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.datasetId_ != null) {
        if (datasetId_ == null) {
          DatasetId = new global::LinNet.DatasetId();
        }
        DatasetId.MergeFrom(other.DatasetId);
      }
      if (other.Type != global::LinNet.FieldType.String) {
        Type = other.Type;
      }
      if (other.OptionalField != false) {
        OptionalField = other.OptionalField;
      }
      if (other.DefaultValue.Length != 0) {
        DefaultValue = other.DefaultValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (datasetId_ == null) {
              DatasetId = new global::LinNet.DatasetId();
            }
            input.ReadMessage(DatasetId);
            break;
          }
          case 24: {
            Type = (global::LinNet.FieldType) input.ReadEnum();
            break;
          }
          case 32: {
            OptionalField = input.ReadBool();
            break;
          }
          case 42: {
            DefaultValue = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RowFilterCondition : pb::IMessage<RowFilterCondition> {
    private static readonly pb::MessageParser<RowFilterCondition> _parser = new pb::MessageParser<RowFilterCondition>(() => new RowFilterCondition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RowFilterCondition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LinNet.LinReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RowFilterCondition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RowFilterCondition(RowFilterCondition other) : this() {
      condition_ = other.condition_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RowFilterCondition Clone() {
      return new RowFilterCondition(this);
    }

    /// <summary>Field number for the "condition" field.</summary>
    public const int ConditionFieldNumber = 1;
    private string condition_ = "";
    /// <summary>
    /// TODO: Change to some kind of Expression Tree
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Condition {
      get { return condition_; }
      set {
        condition_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RowFilterCondition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RowFilterCondition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Condition != other.Condition) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Condition.Length != 0) hash ^= Condition.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Condition.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Condition);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Condition.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Condition);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RowFilterCondition other) {
      if (other == null) {
        return;
      }
      if (other.Condition.Length != 0) {
        Condition = other.Condition;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Condition = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AggregationDimension : pb::IMessage<AggregationDimension> {
    private static readonly pb::MessageParser<AggregationDimension> _parser = new pb::MessageParser<AggregationDimension>(() => new AggregationDimension());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AggregationDimension> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LinNet.LinReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AggregationDimension() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AggregationDimension(AggregationDimension other) : this() {
      fields_ = other.fields_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AggregationDimension Clone() {
      return new AggregationDimension(this);
    }

    /// <summary>Field number for the "fields" field.</summary>
    public const int FieldsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_fields_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> fields_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Fields {
      get { return fields_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AggregationDimension);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AggregationDimension other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!fields_.Equals(other.fields_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= fields_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      fields_.WriteTo(output, _repeated_fields_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += fields_.CalculateSize(_repeated_fields_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AggregationDimension other) {
      if (other == null) {
        return;
      }
      fields_.Add(other.fields_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            fields_.AddEntriesFrom(input, _repeated_fields_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DatasetSchema : pb::IMessage<DatasetSchema> {
    private static readonly pb::MessageParser<DatasetSchema> _parser = new pb::MessageParser<DatasetSchema>(() => new DatasetSchema());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DatasetSchema> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LinNet.LinReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatasetSchema() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatasetSchema(DatasetSchema other) : this() {
      descriptor_ = other.descriptor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatasetSchema Clone() {
      return new DatasetSchema(this);
    }

    /// <summary>Field number for the "descriptor" field.</summary>
    public const int Descriptor_FieldNumber = 1;
    private string descriptor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Descriptor_ {
      get { return descriptor_; }
      set {
        descriptor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DatasetSchema);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DatasetSchema other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Descriptor_ != other.Descriptor_) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Descriptor_.Length != 0) hash ^= Descriptor_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Descriptor_.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Descriptor_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Descriptor_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Descriptor_);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DatasetSchema other) {
      if (other == null) {
        return;
      }
      if (other.Descriptor_.Length != 0) {
        Descriptor_ = other.Descriptor_;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Descriptor_ = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RowLineage : pb::IMessage<RowLineage> {
    private static readonly pb::MessageParser<RowLineage> _parser = new pb::MessageParser<RowLineage>(() => new RowLineage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RowLineage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LinNet.LinReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RowLineage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RowLineage(RowLineage other) : this() {
      lineage_ = other.lineage_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RowLineage Clone() {
      return new RowLineage(this);
    }

    /// <summary>Field number for the "lineage" field.</summary>
    public const int LineageFieldNumber = 1;
    private static readonly pbc::MapField<string, global::LinNet.RowLineage.Types.RowFieldLineage>.Codec _map_lineage_codec
        = new pbc::MapField<string, global::LinNet.RowLineage.Types.RowFieldLineage>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::LinNet.RowLineage.Types.RowFieldLineage.Parser), 10);
    private readonly pbc::MapField<string, global::LinNet.RowLineage.Types.RowFieldLineage> lineage_ = new pbc::MapField<string, global::LinNet.RowLineage.Types.RowFieldLineage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::LinNet.RowLineage.Types.RowFieldLineage> Lineage {
      get { return lineage_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RowLineage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RowLineage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Lineage.Equals(other.Lineage)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Lineage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      lineage_.WriteTo(output, _map_lineage_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += lineage_.CalculateSize(_map_lineage_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RowLineage other) {
      if (other == null) {
        return;
      }
      lineage_.Add(other.lineage_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            lineage_.AddEntriesFrom(input, _map_lineage_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RowLineage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class RowFieldLineage : pb::IMessage<RowFieldLineage> {
        private static readonly pb::MessageParser<RowFieldLineage> _parser = new pb::MessageParser<RowFieldLineage>(() => new RowFieldLineage());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RowFieldLineage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LinNet.RowLineage.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RowFieldLineage() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RowFieldLineage(RowFieldLineage other) : this() {
          parents_ = other.parents_.Clone();
          calculatorId_ = other.calculatorId_ != null ? other.calculatorId_.Clone() : null;
          rowId_ = other.rowId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RowFieldLineage Clone() {
          return new RowFieldLineage(this);
        }

        /// <summary>Field number for the "parents" field.</summary>
        public const int ParentsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::LinNet.FieldDef> _repeated_parents_codec
            = pb::FieldCodec.ForMessage(10, global::LinNet.FieldDef.Parser);
        private readonly pbc::RepeatedField<global::LinNet.FieldDef> parents_ = new pbc::RepeatedField<global::LinNet.FieldDef>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::LinNet.FieldDef> Parents {
          get { return parents_; }
        }

        /// <summary>Field number for the "calculatorId" field.</summary>
        public const int CalculatorIdFieldNumber = 2;
        private global::LinNet.CalculatorId calculatorId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LinNet.CalculatorId CalculatorId {
          get { return calculatorId_; }
          set {
            calculatorId_ = value;
          }
        }

        /// <summary>Field number for the "rowId" field.</summary>
        public const int RowIdFieldNumber = 3;
        private long rowId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long RowId {
          get { return rowId_; }
          set {
            rowId_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RowFieldLineage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RowFieldLineage other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!parents_.Equals(other.parents_)) return false;
          if (!object.Equals(CalculatorId, other.CalculatorId)) return false;
          if (RowId != other.RowId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= parents_.GetHashCode();
          if (calculatorId_ != null) hash ^= CalculatorId.GetHashCode();
          if (RowId != 0L) hash ^= RowId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          parents_.WriteTo(output, _repeated_parents_codec);
          if (calculatorId_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(CalculatorId);
          }
          if (RowId != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(RowId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += parents_.CalculateSize(_repeated_parents_codec);
          if (calculatorId_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(CalculatorId);
          }
          if (RowId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(RowId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RowFieldLineage other) {
          if (other == null) {
            return;
          }
          parents_.Add(other.parents_);
          if (other.calculatorId_ != null) {
            if (calculatorId_ == null) {
              CalculatorId = new global::LinNet.CalculatorId();
            }
            CalculatorId.MergeFrom(other.CalculatorId);
          }
          if (other.RowId != 0L) {
            RowId = other.RowId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                parents_.AddEntriesFrom(input, _repeated_parents_codec);
                break;
              }
              case 18: {
                if (calculatorId_ == null) {
                  CalculatorId = new global::LinNet.CalculatorId();
                }
                input.ReadMessage(CalculatorId);
                break;
              }
              case 24: {
                RowId = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class User : pb::IMessage<User> {
    private static readonly pb::MessageParser<User> _parser = new pb::MessageParser<User>(() => new User());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<User> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LinNet.LinReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User(User other) : this() {
      uid_ = other.uid_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User Clone() {
      return new User(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private string uid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as User);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(User other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(User other) {
      if (other == null) {
        return;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Role : pb::IMessage<Role> {
    private static readonly pb::MessageParser<Role> _parser = new pb::MessageParser<Role>(() => new Role());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Role> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LinNet.LinReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Role() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Role(Role other) : this() {
      uid_ = other.uid_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Role Clone() {
      return new Role(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private string uid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Role);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Role other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Role other) {
      if (other == null) {
        return;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Principal : pb::IMessage<Principal> {
    private static readonly pb::MessageParser<Principal> _parser = new pb::MessageParser<Principal>(() => new Principal());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Principal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LinNet.LinReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Principal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Principal(Principal other) : this() {
      switch (other.KindCase) {
        case KindOneofCase.User:
          User = other.User.Clone();
          break;
        case KindOneofCase.Role:
          Role = other.Role.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Principal Clone() {
      return new Principal(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LinNet.User User {
      get { return kindCase_ == KindOneofCase.User ? (global::LinNet.User) kind_ : null; }
      set {
        kind_ = value;
        kindCase_ = value == null ? KindOneofCase.None : KindOneofCase.User;
      }
    }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LinNet.Role Role {
      get { return kindCase_ == KindOneofCase.Role ? (global::LinNet.Role) kind_ : null; }
      set {
        kind_ = value;
        kindCase_ = value == null ? KindOneofCase.None : KindOneofCase.Role;
      }
    }

    private object kind_;
    /// <summary>Enum of possible cases for the "kind" oneof.</summary>
    public enum KindOneofCase {
      None = 0,
      User = 1,
      Role = 2,
    }
    private KindOneofCase kindCase_ = KindOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KindOneofCase KindCase {
      get { return kindCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKind() {
      kindCase_ = KindOneofCase.None;
      kind_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Principal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Principal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(User, other.User)) return false;
      if (!object.Equals(Role, other.Role)) return false;
      if (KindCase != other.KindCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (kindCase_ == KindOneofCase.User) hash ^= User.GetHashCode();
      if (kindCase_ == KindOneofCase.Role) hash ^= Role.GetHashCode();
      hash ^= (int) kindCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (kindCase_ == KindOneofCase.User) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (kindCase_ == KindOneofCase.Role) {
        output.WriteRawTag(18);
        output.WriteMessage(Role);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (kindCase_ == KindOneofCase.User) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (kindCase_ == KindOneofCase.Role) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Role);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Principal other) {
      if (other == null) {
        return;
      }
      switch (other.KindCase) {
        case KindOneofCase.User:
          if (User == null) {
            User = new global::LinNet.User();
          }
          User.MergeFrom(other.User);
          break;
        case KindOneofCase.Role:
          if (Role == null) {
            Role = new global::LinNet.Role();
          }
          Role.MergeFrom(other.Role);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::LinNet.User subBuilder = new global::LinNet.User();
            if (kindCase_ == KindOneofCase.User) {
              subBuilder.MergeFrom(User);
            }
            input.ReadMessage(subBuilder);
            User = subBuilder;
            break;
          }
          case 18: {
            global::LinNet.Role subBuilder = new global::LinNet.Role();
            if (kindCase_ == KindOneofCase.Role) {
              subBuilder.MergeFrom(Role);
            }
            input.ReadMessage(subBuilder);
            Role = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class Permissions : pb::IMessage<Permissions> {
    private static readonly pb::MessageParser<Permissions> _parser = new pb::MessageParser<Permissions>(() => new Permissions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Permissions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LinNet.LinReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Permissions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Permissions(Permissions other) : this() {
      perPrincipal_ = other.perPrincipal_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Permissions Clone() {
      return new Permissions(this);
    }

    /// <summary>Field number for the "perPrincipal" field.</summary>
    public const int PerPrincipalFieldNumber = 1;
    private static readonly pb::FieldCodec<global::LinNet.Permissions.Types.PrincipalPermissions> _repeated_perPrincipal_codec
        = pb::FieldCodec.ForMessage(10, global::LinNet.Permissions.Types.PrincipalPermissions.Parser);
    private readonly pbc::RepeatedField<global::LinNet.Permissions.Types.PrincipalPermissions> perPrincipal_ = new pbc::RepeatedField<global::LinNet.Permissions.Types.PrincipalPermissions>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LinNet.Permissions.Types.PrincipalPermissions> PerPrincipal {
      get { return perPrincipal_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Permissions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Permissions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!perPrincipal_.Equals(other.perPrincipal_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= perPrincipal_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      perPrincipal_.WriteTo(output, _repeated_perPrincipal_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += perPrincipal_.CalculateSize(_repeated_perPrincipal_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Permissions other) {
      if (other == null) {
        return;
      }
      perPrincipal_.Add(other.perPrincipal_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            perPrincipal_.AddEntriesFrom(input, _repeated_perPrincipal_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Permissions message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class PrincipalPermissions : pb::IMessage<PrincipalPermissions> {
        private static readonly pb::MessageParser<PrincipalPermissions> _parser = new pb::MessageParser<PrincipalPermissions>(() => new PrincipalPermissions());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PrincipalPermissions> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LinNet.Permissions.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PrincipalPermissions() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PrincipalPermissions(PrincipalPermissions other) : this() {
          principal_ = other.principal_ != null ? other.principal_.Clone() : null;
          allowed_ = other.allowed_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PrincipalPermissions Clone() {
          return new PrincipalPermissions(this);
        }

        /// <summary>Field number for the "principal" field.</summary>
        public const int PrincipalFieldNumber = 1;
        private global::LinNet.Principal principal_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LinNet.Principal Principal {
          get { return principal_; }
          set {
            principal_ = value;
          }
        }

        /// <summary>Field number for the "allowed" field.</summary>
        public const int AllowedFieldNumber = 2;
        private static readonly pb::FieldCodec<global::LinNet.PermissionType> _repeated_allowed_codec
            = pb::FieldCodec.ForEnum(18, x => (int) x, x => (global::LinNet.PermissionType) x);
        private readonly pbc::RepeatedField<global::LinNet.PermissionType> allowed_ = new pbc::RepeatedField<global::LinNet.PermissionType>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::LinNet.PermissionType> Allowed {
          get { return allowed_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PrincipalPermissions);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PrincipalPermissions other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Principal, other.Principal)) return false;
          if(!allowed_.Equals(other.allowed_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (principal_ != null) hash ^= Principal.GetHashCode();
          hash ^= allowed_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (principal_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Principal);
          }
          allowed_.WriteTo(output, _repeated_allowed_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (principal_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Principal);
          }
          size += allowed_.CalculateSize(_repeated_allowed_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PrincipalPermissions other) {
          if (other == null) {
            return;
          }
          if (other.principal_ != null) {
            if (principal_ == null) {
              Principal = new global::LinNet.Principal();
            }
            Principal.MergeFrom(other.Principal);
          }
          allowed_.Add(other.allowed_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (principal_ == null) {
                  Principal = new global::LinNet.Principal();
                }
                input.ReadMessage(Principal);
                break;
              }
              case 18:
              case 16: {
                allowed_.AddEntriesFrom(input, _repeated_allowed_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class DatasetGroup : pb::IMessage<DatasetGroup> {
    private static readonly pb::MessageParser<DatasetGroup> _parser = new pb::MessageParser<DatasetGroup>(() => new DatasetGroup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DatasetGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LinNet.LinReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatasetGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatasetGroup(DatasetGroup other) : this() {
      datasets_ = other.datasets_.Clone();
      permissions_ = other.permissions_ != null ? other.permissions_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatasetGroup Clone() {
      return new DatasetGroup(this);
    }

    /// <summary>Field number for the "datasets" field.</summary>
    public const int DatasetsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::LinNet.DatasetId> _repeated_datasets_codec
        = pb::FieldCodec.ForMessage(10, global::LinNet.DatasetId.Parser);
    private readonly pbc::RepeatedField<global::LinNet.DatasetId> datasets_ = new pbc::RepeatedField<global::LinNet.DatasetId>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LinNet.DatasetId> Datasets {
      get { return datasets_; }
    }

    /// <summary>Field number for the "permissions" field.</summary>
    public const int PermissionsFieldNumber = 200;
    private global::LinNet.Permissions permissions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LinNet.Permissions Permissions {
      get { return permissions_; }
      set {
        permissions_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DatasetGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DatasetGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!datasets_.Equals(other.datasets_)) return false;
      if (!object.Equals(Permissions, other.Permissions)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= datasets_.GetHashCode();
      if (permissions_ != null) hash ^= Permissions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      datasets_.WriteTo(output, _repeated_datasets_codec);
      if (permissions_ != null) {
        output.WriteRawTag(194, 12);
        output.WriteMessage(Permissions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += datasets_.CalculateSize(_repeated_datasets_codec);
      if (permissions_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Permissions);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DatasetGroup other) {
      if (other == null) {
        return;
      }
      datasets_.Add(other.datasets_);
      if (other.permissions_ != null) {
        if (permissions_ == null) {
          Permissions = new global::LinNet.Permissions();
        }
        Permissions.MergeFrom(other.Permissions);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            datasets_.AddEntriesFrom(input, _repeated_datasets_codec);
            break;
          }
          case 1602: {
            if (permissions_ == null) {
              Permissions = new global::LinNet.Permissions();
            }
            input.ReadMessage(Permissions);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CalculatorId : pb::IMessage<CalculatorId> {
    private static readonly pb::MessageParser<CalculatorId> _parser = new pb::MessageParser<CalculatorId>(() => new CalculatorId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CalculatorId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LinNet.LinReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalculatorId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalculatorId(CalculatorId other) : this() {
      uid_ = other.uid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalculatorId Clone() {
      return new CalculatorId(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private string uid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CalculatorId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CalculatorId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CalculatorId other) {
      if (other == null) {
        return;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CalculatorDefinition : pb::IMessage<CalculatorDefinition> {
    private static readonly pb::MessageParser<CalculatorDefinition> _parser = new pb::MessageParser<CalculatorDefinition>(() => new CalculatorDefinition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CalculatorDefinition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LinNet.LinReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalculatorDefinition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalculatorDefinition(CalculatorDefinition other) : this() {
      uid_ = other.uid_ != null ? other.uid_.Clone() : null;
      rpcDescriptor_ = other.rpcDescriptor_;
      inputDatasets_ = other.inputDatasets_.Clone();
      ouputDatasets_ = other.ouputDatasets_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalculatorDefinition Clone() {
      return new CalculatorDefinition(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private global::LinNet.CalculatorId uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LinNet.CalculatorId Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "rpcDescriptor" field.</summary>
    public const int RpcDescriptorFieldNumber = 2;
    private string rpcDescriptor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RpcDescriptor {
      get { return rpcDescriptor_; }
      set {
        rpcDescriptor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "inputDatasets" field.</summary>
    public const int InputDatasetsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::LinNet.DatasetSchema> _repeated_inputDatasets_codec
        = pb::FieldCodec.ForMessage(26, global::LinNet.DatasetSchema.Parser);
    private readonly pbc::RepeatedField<global::LinNet.DatasetSchema> inputDatasets_ = new pbc::RepeatedField<global::LinNet.DatasetSchema>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LinNet.DatasetSchema> InputDatasets {
      get { return inputDatasets_; }
    }

    /// <summary>Field number for the "ouputDatasets" field.</summary>
    public const int OuputDatasetsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::LinNet.DatasetSchema> _repeated_ouputDatasets_codec
        = pb::FieldCodec.ForMessage(34, global::LinNet.DatasetSchema.Parser);
    private readonly pbc::RepeatedField<global::LinNet.DatasetSchema> ouputDatasets_ = new pbc::RepeatedField<global::LinNet.DatasetSchema>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LinNet.DatasetSchema> OuputDatasets {
      get { return ouputDatasets_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CalculatorDefinition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CalculatorDefinition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Uid, other.Uid)) return false;
      if (RpcDescriptor != other.RpcDescriptor) return false;
      if(!inputDatasets_.Equals(other.inputDatasets_)) return false;
      if(!ouputDatasets_.Equals(other.ouputDatasets_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (uid_ != null) hash ^= Uid.GetHashCode();
      if (RpcDescriptor.Length != 0) hash ^= RpcDescriptor.GetHashCode();
      hash ^= inputDatasets_.GetHashCode();
      hash ^= ouputDatasets_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (uid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Uid);
      }
      if (RpcDescriptor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RpcDescriptor);
      }
      inputDatasets_.WriteTo(output, _repeated_inputDatasets_codec);
      ouputDatasets_.WriteTo(output, _repeated_ouputDatasets_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (uid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Uid);
      }
      if (RpcDescriptor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RpcDescriptor);
      }
      size += inputDatasets_.CalculateSize(_repeated_inputDatasets_codec);
      size += ouputDatasets_.CalculateSize(_repeated_ouputDatasets_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CalculatorDefinition other) {
      if (other == null) {
        return;
      }
      if (other.uid_ != null) {
        if (uid_ == null) {
          Uid = new global::LinNet.CalculatorId();
        }
        Uid.MergeFrom(other.Uid);
      }
      if (other.RpcDescriptor.Length != 0) {
        RpcDescriptor = other.RpcDescriptor;
      }
      inputDatasets_.Add(other.inputDatasets_);
      ouputDatasets_.Add(other.ouputDatasets_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (uid_ == null) {
              Uid = new global::LinNet.CalculatorId();
            }
            input.ReadMessage(Uid);
            break;
          }
          case 18: {
            RpcDescriptor = input.ReadString();
            break;
          }
          case 26: {
            inputDatasets_.AddEntriesFrom(input, _repeated_inputDatasets_codec);
            break;
          }
          case 34: {
            ouputDatasets_.AddEntriesFrom(input, _repeated_ouputDatasets_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Sandbox : pb::IMessage<Sandbox> {
    private static readonly pb::MessageParser<Sandbox> _parser = new pb::MessageParser<Sandbox>(() => new Sandbox());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Sandbox> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LinNet.LinReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sandbox() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sandbox(Sandbox other) : this() {
      owner_ = other.owner_ != null ? other.owner_.Clone() : null;
      global_ = other.global_ != null ? other.global_.Clone() : null;
      stashed_ = other.stashed_ != null ? other.stashed_.Clone() : null;
      pendingValidation_ = other.pendingValidation_ != null ? other.pendingValidation_.Clone() : null;
      availableCalculators_ = other.availableCalculators_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sandbox Clone() {
      return new Sandbox(this);
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 1;
    private global::LinNet.User owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LinNet.User Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "global" field.</summary>
    public const int GlobalFieldNumber = 2;
    private global::LinNet.DatasetGroup global_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LinNet.DatasetGroup Global {
      get { return global_; }
      set {
        global_ = value;
      }
    }

    /// <summary>Field number for the "stashed" field.</summary>
    public const int StashedFieldNumber = 3;
    private global::LinNet.DatasetGroup stashed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LinNet.DatasetGroup Stashed {
      get { return stashed_; }
      set {
        stashed_ = value;
      }
    }

    /// <summary>Field number for the "pendingValidation" field.</summary>
    public const int PendingValidationFieldNumber = 4;
    private global::LinNet.DatasetGroup pendingValidation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LinNet.DatasetGroup PendingValidation {
      get { return pendingValidation_; }
      set {
        pendingValidation_ = value;
      }
    }

    /// <summary>Field number for the "availableCalculators" field.</summary>
    public const int AvailableCalculatorsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::LinNet.CalculatorDefinition> _repeated_availableCalculators_codec
        = pb::FieldCodec.ForMessage(42, global::LinNet.CalculatorDefinition.Parser);
    private readonly pbc::RepeatedField<global::LinNet.CalculatorDefinition> availableCalculators_ = new pbc::RepeatedField<global::LinNet.CalculatorDefinition>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LinNet.CalculatorDefinition> AvailableCalculators {
      get { return availableCalculators_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Sandbox);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Sandbox other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Owner, other.Owner)) return false;
      if (!object.Equals(Global, other.Global)) return false;
      if (!object.Equals(Stashed, other.Stashed)) return false;
      if (!object.Equals(PendingValidation, other.PendingValidation)) return false;
      if(!availableCalculators_.Equals(other.availableCalculators_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (owner_ != null) hash ^= Owner.GetHashCode();
      if (global_ != null) hash ^= Global.GetHashCode();
      if (stashed_ != null) hash ^= Stashed.GetHashCode();
      if (pendingValidation_ != null) hash ^= PendingValidation.GetHashCode();
      hash ^= availableCalculators_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (owner_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Owner);
      }
      if (global_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Global);
      }
      if (stashed_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Stashed);
      }
      if (pendingValidation_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PendingValidation);
      }
      availableCalculators_.WriteTo(output, _repeated_availableCalculators_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (global_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Global);
      }
      if (stashed_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stashed);
      }
      if (pendingValidation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PendingValidation);
      }
      size += availableCalculators_.CalculateSize(_repeated_availableCalculators_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Sandbox other) {
      if (other == null) {
        return;
      }
      if (other.owner_ != null) {
        if (owner_ == null) {
          Owner = new global::LinNet.User();
        }
        Owner.MergeFrom(other.Owner);
      }
      if (other.global_ != null) {
        if (global_ == null) {
          Global = new global::LinNet.DatasetGroup();
        }
        Global.MergeFrom(other.Global);
      }
      if (other.stashed_ != null) {
        if (stashed_ == null) {
          Stashed = new global::LinNet.DatasetGroup();
        }
        Stashed.MergeFrom(other.Stashed);
      }
      if (other.pendingValidation_ != null) {
        if (pendingValidation_ == null) {
          PendingValidation = new global::LinNet.DatasetGroup();
        }
        PendingValidation.MergeFrom(other.PendingValidation);
      }
      availableCalculators_.Add(other.availableCalculators_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (owner_ == null) {
              Owner = new global::LinNet.User();
            }
            input.ReadMessage(Owner);
            break;
          }
          case 18: {
            if (global_ == null) {
              Global = new global::LinNet.DatasetGroup();
            }
            input.ReadMessage(Global);
            break;
          }
          case 26: {
            if (stashed_ == null) {
              Stashed = new global::LinNet.DatasetGroup();
            }
            input.ReadMessage(Stashed);
            break;
          }
          case 34: {
            if (pendingValidation_ == null) {
              PendingValidation = new global::LinNet.DatasetGroup();
            }
            input.ReadMessage(PendingValidation);
            break;
          }
          case 42: {
            availableCalculators_.AddEntriesFrom(input, _repeated_availableCalculators_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DatasetAuthorizationRequest : pb::IMessage<DatasetAuthorizationRequest> {
    private static readonly pb::MessageParser<DatasetAuthorizationRequest> _parser = new pb::MessageParser<DatasetAuthorizationRequest>(() => new DatasetAuthorizationRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DatasetAuthorizationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LinNet.LinReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatasetAuthorizationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatasetAuthorizationRequest(DatasetAuthorizationRequest other) : this() {
      name_ = other.name_ != null ? other.name_.Clone() : null;
      permission_ = other.permission_;
      dataset_ = other.dataset_ != null ? other.dataset_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatasetAuthorizationRequest Clone() {
      return new DatasetAuthorizationRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private global::LinNet.User name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LinNet.User Name {
      get { return name_; }
      set {
        name_ = value;
      }
    }

    /// <summary>Field number for the "permission" field.</summary>
    public const int PermissionFieldNumber = 2;
    private global::LinNet.PermissionType permission_ = global::LinNet.PermissionType.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LinNet.PermissionType Permission {
      get { return permission_; }
      set {
        permission_ = value;
      }
    }

    /// <summary>Field number for the "dataset" field.</summary>
    public const int DatasetFieldNumber = 3;
    private global::LinNet.DatasetId dataset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LinNet.DatasetId Dataset {
      get { return dataset_; }
      set {
        dataset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DatasetAuthorizationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DatasetAuthorizationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Name, other.Name)) return false;
      if (Permission != other.Permission) return false;
      if (!object.Equals(Dataset, other.Dataset)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (name_ != null) hash ^= Name.GetHashCode();
      if (Permission != global::LinNet.PermissionType.None) hash ^= Permission.GetHashCode();
      if (dataset_ != null) hash ^= Dataset.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (name_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Name);
      }
      if (Permission != global::LinNet.PermissionType.None) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Permission);
      }
      if (dataset_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Dataset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (name_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Name);
      }
      if (Permission != global::LinNet.PermissionType.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Permission);
      }
      if (dataset_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dataset);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DatasetAuthorizationRequest other) {
      if (other == null) {
        return;
      }
      if (other.name_ != null) {
        if (name_ == null) {
          Name = new global::LinNet.User();
        }
        Name.MergeFrom(other.Name);
      }
      if (other.Permission != global::LinNet.PermissionType.None) {
        Permission = other.Permission;
      }
      if (other.dataset_ != null) {
        if (dataset_ == null) {
          Dataset = new global::LinNet.DatasetId();
        }
        Dataset.MergeFrom(other.Dataset);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (name_ == null) {
              Name = new global::LinNet.User();
            }
            input.ReadMessage(Name);
            break;
          }
          case 16: {
            Permission = (global::LinNet.PermissionType) input.ReadEnum();
            break;
          }
          case 26: {
            if (dataset_ == null) {
              Dataset = new global::LinNet.DatasetId();
            }
            input.ReadMessage(Dataset);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DatasetAuthorizationResponse : pb::IMessage<DatasetAuthorizationResponse> {
    private static readonly pb::MessageParser<DatasetAuthorizationResponse> _parser = new pb::MessageParser<DatasetAuthorizationResponse>(() => new DatasetAuthorizationResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DatasetAuthorizationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LinNet.LinReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatasetAuthorizationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatasetAuthorizationResponse(DatasetAuthorizationResponse other) : this() {
      result_ = other.result_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatasetAuthorizationResponse Clone() {
      return new DatasetAuthorizationResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::LinNet.DatasetAuthorizationResponse.Types.Result result_ = global::LinNet.DatasetAuthorizationResponse.Types.Result.Denied;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LinNet.DatasetAuthorizationResponse.Types.Result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DatasetAuthorizationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DatasetAuthorizationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != global::LinNet.DatasetAuthorizationResponse.Types.Result.Denied) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != global::LinNet.DatasetAuthorizationResponse.Types.Result.Denied) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != global::LinNet.DatasetAuthorizationResponse.Types.Result.Denied) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DatasetAuthorizationResponse other) {
      if (other == null) {
        return;
      }
      if (other.Result != global::LinNet.DatasetAuthorizationResponse.Types.Result.Denied) {
        Result = other.Result;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = (global::LinNet.DatasetAuthorizationResponse.Types.Result) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DatasetAuthorizationResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Result {
        [pbr::OriginalName("DENIED")] Denied = 0,
        [pbr::OriginalName("ALLOWED")] Allowed = 1,
        [pbr::OriginalName("USER_NOT_FOUND")] UserNotFound = 2,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
